\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename xroar.info
@dircategory Emulators
@direntry
* XRoar: (xroar).               Dragon & Tandy CoCo emulator.
@end direntry

@include version.texi

@settitle XRoar Dragon Emulator Manual
@afourpaper
@c @setchapternewpage off
@ifclear VERSION
@set VERSION Unknown
@end ifclear
@c %**end of header

@iftex
@macro myuref {link, text}
@uref{\link\, \text\}@footnote{\link\}
@end macro
@end iftex

@ifnottex
@macro myuref {link, text}
@uref{\link\, \text\}
@end macro
@end ifnottex

@copying
This manual is for XRoar (version @value{VERSION}), a Dragon and
Tandy Colour Computer emulator.

Copyright @copyright{} 2014
Ciaran Anscomb.
@end copying

@titlepage
@title XRoar @value{VERSION}
@subtitle Dragon and Tandy Colour Computer emulator
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Introduction

XRoar is a Dragon emulator that runs on a wide variety of platforms.  Due to
hardware similarities, XRoar also emulates the Tandy Colour Computer (CoCo)
models 1 & 2.  Some features are:

@itemize @bullet
@item Emulates Dragon 32, Dragon 64, Dragon 200-E, Tandy CoCo 1 & 2, and compatibles.
@item Emulates DragonDOS, Delta and RSDOS disk systems.
@item Emulates the Orchestra 90-CC stereo sound cartridge.
@item Supports both raw and translated keyboard modes.
@item Reads and writes virtual cassettes (compact @file{.cas} files and audio files).
@item Reads and writes VDK, JVC and DMK format virtual floppy diskettes.
@item Saves and loads machine snapshots.
@item Provides a GDB target for remote debugging.
@end itemize

XRoar was originally written to run on Solaris, Linux and the GP32 handheld.
Later, it was ported to the Nintendo DS.  Support has now been dropped for the
GP32 and NDS as emulation accuracy, and thus the CPU requirement, has
increased.

XRoar is easily built from source under Linux, and binary packages are provided
for Mac OS X and Windows.

@ifnottex
@menu
* Getting started::
* Hardware emulation::
* Files::
* User interface::
* Troubleshooting::
* Acknowledgements::
@end menu
@end ifnottex


@node Getting started, Hardware emulation, Top, Top
@chapter Getting started

@menu
* Installation & running::
* Building from source::
* Running programs::
* Configuration file::
@end menu


@node Installation & running
@section Installation & running

Pre-built binary packages are available from the
@myuref{http://www.6809.org.uk/xroar/, XRoar home page}.  If one is not
available for your architecture, you will need to build from source.  XRoar
should build and run on any POSIX-like system for which SDL is available.

You will also need BASIC ROM images---binary dumps of the firmware from an
original machine.  The originals were part-written by Microsoft, so they are
not distributed in the XRoar packages.


@subsection Mac OS X binary package

Download the appropriate @file{.dmg} image for your system.  Open the image and
drag the application icon to @file{/Applications/}.

For troubleshooting or testing options, it's often a good idea to run from the
command line, but application packages don't make that trivial.  A symbolic
link to somewhere in your @env{PATH} is all that's required.  e.g.:

@example
$ sudo ln -s /Applications/XRoar.app/Contents/MacOS/xroar \
        /usr/local/bin/xroar
@end example

After this, you can start the emulator by simply typing @command{xroar}
followed by any command line options.

ROM images should be placed in a directory you create under your @env{HOME}
named @file{~/Library/XRoar/roms/} (not the system directory, @file{/Library/}.
Name any configuration file you create @file{~/Library/XRoar/xroar.conf}.

The Mac OS X build provides a menu for access to certain features, and often
accepts the more familiar @kbd{Command}+@var{key} in place of the
@kbd{Ctrl}+@var{key} shortcuts listed in this manual.


@subsection Windows binary package

Download and unzip the appropriate @file{.zip} distribution for your system.
The easiest way forward is to simply run it from this directory.

Copy ROM images to the same directory, and if you create a configuration file,
simply name if @file{xroar.conf} and put it in the same directory.

Note when troubleshooting that the Windows packages are built using
@myuref{http://www.mingw.org/, MinGW} (Minimalist GNU for Windows), and instead
of printing to the console, useful information will end up in files called
@file{stdout.txt} or @file{stderr.txt}.

The Windows build provides menu-based access to certain features.


@node Building from source
@section Building from source

@menu
* Dependencies::
* Compilation::
@end menu

@node Dependencies
@subsection Dependencies

If there is no binary package for your system, you will have to build from
source.  XRoar can use various backend toolkits, and you will need to ensure
you have their development files installed.  If you're using Debian, this can
(at the time of writing) be achieved with the following simple command:

@example
$ sudo apt-get install build-essential libsndfile1-dev libgtk2.0-dev \
        libgtkglext1-dev libasound2-dev
@end example

Under Mac OS X, first be sure to install Apple's
@myuref{https://developer.apple.com/xcode/, Xcode} package.  The easiest way to
then ensure you have XRoar's dependencies available is to use a system like
@myuref{http://mxcl.github.com/homebrew/, Homebrew} or
@myuref{http://www.macports.org/, MacPorts}.  For Homebrew, the following
command will install the required dependencies:

@example
$ brew install libsndfile sdl
@end example

Otherwise, you'll have to do a bit of platform-specific research to ensure you
have all the dependencies for a full build:

@myuref{http://www.gtk.org/, GTK+}, the GIMP toolkit, provides the most
full-featured user interface.  It is only usable as such if you also have
@myuref{http://projects.gnome.org/gtkglext/, GtkGlExt}, an OpenGL extension
used to provide video output.  Otherwise, it can provide a file requester for
use by other user interfaces.

@myuref{http://www.libsdl.org/, SDL}, Simple Directmedia Layer, provides a
slightly more basic user experience.  Menus are added using native code under
Mac OS X and Windows; any other target using SDL will support only keyboard
shortcuts.  Unless you are building for Linux, SDL is required to use
joysticks.

Other supported audio APIs: OSS, ALSA, PulseAudio, CoreAudio.  Some other
options are still in the code base, but have not been tested in a while.

@myuref{http://www.mega-nerd.com/libsndfile/, libsndfile} is recommended to
enable support for using audio files as cassette images.

@node Compilation
@subsection Compilation

Once you have the dependencies, building XRoar follows a familiar procedure:

@example
$ gzip -dc xroar-@value{VERSION}.tar.gz | tar xvf -
$ cd xroar-@value{VERSION}
$ ./configure
$ make
$ sudo make install
@end example

The @command{configure} script has a lot of options guiding what it tests for,
specifying cross-compilation, changing the install path, etc.  List them all
with the @option{--help} option.  Be aware that this is a custom script, it is
not generated by the GNU build system.

By default, @command{configure} will set up an install @emph{prefix} of
@file{/usr/local}, but this can be changed by using the
@option{--prefix=@var{path}} option.

Once built, run @command{make install} as root (or use @command{sudo}, as in
the example above) to install the binary and info documentation on your system.
The executable is called @file{xroar}.  ROM images should be placed either in
your home directory as @file{~/.xroar/roms/}, or under the installation
@emph{prefix} as @file{@emph{prefix}/share/xroar/roms/}.  Any configuration
file should be created as @file{~/.xroar/xroar.conf}.

XRoar can be built on one platform to run on another.  The Windows binary
package is built like this.  To specify a cross-compile, use the
@option{--host=@var{host}} argument to @command{configure}.  For example, to
build for Windows, you might use @samp{./configure --host=i686-w64-mingw32}.
Getting everything ``just so'' for a cross-build can be a tricky procedure, and
the details are beyond the scope of this manual.


@node Running programs
@section Running programs

Images of ROM cartridges, cassettes and disks can all be attached by pressing
@kbd{Ctrl}+@kbd{L}.  Cassettes will be positioned at the beginning of the
``tape'' and disks will be inserted into @w{Drive 1}.

To attach an image and try to automatically start it, press
@kbd{Ctrl}+@kbd{Shift}+@kbd{L} instead.  XRoar will try and start the
program using the normal method for the type of image:

@itemize @bullet

@item If a BASIC program is found on a cassette, XRoar types ``CLOAD'', waits
for the program to load, then types ``RUN''.

@item For machine code programs on cassette, XRoar types ``CLOADM:EXEC''.

@item If a ROM cartridge is inserted, the emulated machine is power cycled.

@item If a disk image is autorun, XRoar types ``BOOT'' (Dragon) or ``DOS'' (CoCo).

@end itemize

If you have trouble with a program, refer to its loading instructions: it may
require a different series of commands to get going.  If you still have issues,
see @ref{Cartridges}, @ref{Cassettes}, or @ref{Disks}.

The keyboard layout of modern machines is not identical to that of the Dragon,
so XRoar provides two ways of working.  The default, ``untranslated'', is to
map key @emph{positions} as closely as possible (e.g., the key to the right of
@kbd{P} maps to @kbd{@@}).  Pressing @kbd{Ctrl}+@kbd{Z} toggles
``translated'' mode, which tries to map key @emph{symbols} closely instead
(e.g., pressing @kbd{'} will press @kbd{Shift}+@kbd{7} in the emulated
machine).

In addition, a couple of keys aren't always available on modern keyboads, so
@key{Escape} maps to the Dragon's @key{BREAK} key, and @key{Home} maps to
@key{CLEAR}.  @xref{Keyboard}.

XRoar will make use of attached joysticks, but can also emulate them with the
cursor keys and @key{Left Alt}.  Press @kbd{Ctrl}+@kbd{J} to cycle through
three emulation modes: No joystick emulation (default), Right joystick, Left
joystick.  @xref{Joysticks}.


@node Configuration file
@section Configuration file

This manual details the options available for configuring XRoar.  Each option
can be passed on the command line or placed in a configuration file called
@file{xroar.conf}.  @file{xroar.conf} is read first, and any command line
options then take precedence.  Directives are listed in @file{xroar.conf} one
per line, and the leading dashes may be omitted.

The installation and compilation sections above list good default locations for
@file{xroar.conf}, but it is actually searched for in a list of directories.
You can override this search path with the @env{XROAR_CONF_PATH} environment
variable, which contains a @samp{:}-separated list of directories.  Here are
the defaults:

@multitable {Mac OS X.} {:~/Local Settings/Application Data/XRoar:~/Application Data/XRoar.}
@headitem Platform @tab Default @env{XROAR_CONF_PATH}
@item Unix/Linux @tab ~/.xroar:@emph{prefix}/etc:@emph{prefix}/share/xroar
@item Mac OS X @tab ~/Library/XRoar:~/.xroar:@emph{prefix}/etc:@emph{prefix}/share/xroar
@item Windows @tab :~/Local Settings/Application Data/XRoar:~/Application Data/XRoar
@end multitable

Note the leading @samp{:} in the Windows default indicates an empty entry,
meaning it will look in the current working directory first (i.e., you can put
@file{xroar.conf} into the directory from which you run XRoar).

@samp{~} indicates the user's home directory: the @env{HOME} environment
variable on Unix systems, or @env{USERPROFILE} on Windows.  @emph{prefix} is
the installation prefix, which is usually @file{/usr/local}.

To bypass the search path and start XRoar using a specific configuration file,
pass @option{-c @var{filename}} as the very first option to XRoar.

To print the complete current configuration to standard output (suitable for
redirection to a config file), run with @option{-config-print}.  This will
include all the built-in machine and cartridge definitions.


@node Hardware emulation
@chapter Hardware emulation

@menu
* Machines::
* Cartridges::
@end menu


@node Machines
@section Machines

With no other options, XRoar searches the ROM path and determines which
supported machine has firmware ROM images are available.  It tries in this
order: Dragon 64, Dragon 32, Tandy CoCo.  This can be overridden with the
@option{-default-machine @var{name}} option.  XRoar has built-in configurations
for the following machines:

@multitable {dragon64xxx} {Tandy Color Computer (NTSC).xxx}
@headitem Name @tab Description
@item @samp{dragon32} @tab Dragon 32 (PAL).
@item @samp{dragon64} @tab Dragon 64 (PAL).
@item @samp{dragon200e} @tab Dragon 200-E (PAL).
@item @samp{tano} @tab Tano Dragon (NTSC).
@item @samp{coco} @tab Tandy Colour Computer (PAL).
@item @samp{cocous} @tab Tandy Color Computer (NTSC).
@item @samp{mx1600} @tab Dynacom MX-1600 (PAL-M).
@end multitable

You can create new machine configurations or reconfigure existing ones.  Select
a machine configuration with @option{-machine @var{name}}, and use the
following options to modify it:

@table @option

@item -machine-desc @var{name}
Description shown in @option{-machine help}.

@item -machine-arch @var{arch}
Base machine architecture.  One of @samp{dragon64}, @samp{dragon32} or @samp{coco}.

@item -machine-cpu @var{cpu}
Fitted CPU.  One of @samp{6809} or @samp{6309}.  Hitachi 6309 support is not as well tested.

@item -bas @var{rom}
ROM image to use for Colour BASIC (CoCo only).

@item -extbas @var{rom}
ROM image to use for Extended BASIC.

@item -altbas @var{rom}
64K-mode Extended BASIC for Dragon 64 & Dragon 200-E.

@item -nobas
@itemx -noextbas
@itemx -noaltbas
Indicate the corresponding ROM is not fitted in this machine.

@item -ext-charset @var{rom}
ROM image to use for external character generator.

@item -tv-type @var{type}
One of @samp{pal}, @samp{ntsc} or @samp{pal-m}.  PAL-M support is not complete, and will
instead be treated the same as NTSC.

@item -vdg-type @var{type}
Indicate the VDG variant fitted.  One of @samp{6847} or @samp{6847t1}.

@item -ram @var{kbytes}
Amount of RAM fitted.

@item -machine-cart @var{name}
Default cartridge to attach.  @xref{Cartridges}.

@item -nodos
Indicate that XRoar is not to automatically attempt to attach a DOS cartridge
to this machine (the default is to try).

@end table

For example, if the following lines were placed in your @file{xroar.conf}, a
new machine could be selected with @option{-default-machine pippin}:

@example
machine pippin
machine-desc Dragon Pippin (prototype)
machine-arch dragon32
ram 16
@end example


@node Cartridges
@section Cartridges

The default cartridge for a machine is selected with the @option{-machine-cart}
option.  XRoar has built-in definitions for four cartridges:

@table @samp

@item dragondos

DragonDOS, official disk interface cartridge from Dragon Data Ltd.  Based on
the WD2797 Floppy Disk Controller chip.

@item delta

Delta System, Premier Microsystems' disk interface cartridge for the Dragon.
@w{Mk 2}, based on the WD2791 controller.

@item rsdos

RSDOS, Tandy's disk interface cartridge for use with the CoCo.  Based on the
WD1793 controller.

@item orch90

The Orchestra 90-CC cartridge provides stereo 8-bit audio output.  The default
ROM is CoCo-only, but the hardware is compatible with the Dragon.

@end table

You can create new cartridge configurations or reconfigure existing ones.
Select a cartridge configuration with @option{-cart @var{name}}, and use the
following options to modify it:

@table @option

@item -cart-desc @var{text}

Cartridge description shown in @option{-cart help}.

@item -cart-type @var{type}

Set cartridge base type.  One of @samp{rom}, @samp{dragondos}, @samp{delta},
@samp{rsdos} or @samp{orch90}.

@item -cart-rom @var{filename}

The ROM image specified will be mapped from $C000.

@item -cart-rom2 @var{filename}

The ROM image specified will be mapped from $E000.

@item -cart-becker

Enable becker port where supported.

@item -cart-autorun

Auto-start cartridge using FIRQ.

@end table

Defining extra cartridges is most usefully done in the configuration file, for
example:

@example
cart sdose6
cart-desc SuperDOS E6
cart-type dragondos
cart-rom sdose6.rom
cart-rom2 dosdream.rom
@end example

This will define a cartridge called @samp{sdose6} as a DragonDOS cartridge with
its ROM replaced with @file{sdose6.rom}, and an additional ROM called
@file{dosdream.rom}.

XRoar will automatically attempt to find a disk interface relevant to the
current machine unless a specific default has been configured for the machine
with @option{-machine-cart}, or automatic selection is disabled with the
@option{-nodos} option.

Selecting a ROM image file with the @option{-load} or @option{-run} command
line options, or with @kbd{Ctrl}+@kbd{L} or
@kbd{Ctrl}+@kbd{Shift}+@kbd{L}, will attach a ROM cartridge.

Within the emulator, cartridges can be enabled or disabled by pressing
@kbd{Ctrl}+@kbd{E}.  You will almost certainly want to follow this with a
hard reset (@kbd{Ctrl}+@kbd{Shift}+@kbd{R}).

@subsection Becker port

XRoar supports an emulator-only feature that enables it to connect to a server
using a TCP connection to access remote facilities such as disk images and MIDI
devices---the ``becker port''.  This appears as a memory-mapped device, and
XRoar supports it as an optional feature of the DOS cartridge.

Enable this port when configuring a cartridge with @option{-cart-becker}.  The
@option{-becker} option tells XRoar to prefer a cartridge with it enabled when
automatically selecting one.

The IP and port to connect to can be specified with the @option{-becker-ip} and
@option{-becker-port} options.  These default to @samp{127.0.0.1} and
@samp{65504} respectively, matching the defaults for DriveWire 4, the most
popular server application used to provide such facilities.


@node Files
@chapter Files

In general, files can be attached on the command line with @option{-load
@var{filename}}, or by pressing @kbd{Ctrl}+@kbd{L}.  XRoar judges the type
of file based on its extension.  To attempt to intelligently autorun a file,
use @option{-run @var{filename}} or press @kbd{Ctrl}+@kbd{Shift}+@kbd{L}.
See @ref{Running programs} for the methods XRoar will use to autorun a file.

@menu
* Cassettes::
* Disks::
* ROM cartridges::
* Snapshots::
* Binary files::
* Firmware ROM images::
@end menu


@node Cassettes
@section Cassettes

XRoar supports three types of cassette image:

@multitable @columnfractions .15 .80
@headitem Extension @tab Description
@item @file{.cas}
@tab Cassette file.  Simple binary representation of data contained on a
tape.  Cannot represent silence, or some custom encodings.
@item @file{.wav}
@tab Cassette audio file.  XRoar can read sampled audio from original
cassettes.
@item @file{.bas}, @file{.asc}
@tab ASCII BASIC file.  XRoar will convert text on the fly into blocks suitable
for loading in ASCII mode.  Read-only.
@end multitable

To create a cassette image for writing (with the @command{CSAVE} or
@command{CSAVEM} BASIC commands, for example), use the @option{-tape-write
@var{filename}} option, or press @kbd{Ctrl}+@kbd{W}.  Created files will be
truncated to zero length, so be careful not to overwrite any existing files
with this command.

The currently open tape files used for reading and writing are distinct.

The @option{-tape-fast} option accelerates tape loading by intercepting ROM
calls.  Disable with @option{-no-tape-fast}.  On by default.

The @option{-tape-rewrite} option enables rewriting of anything read from the
input tape to the output tape.  This is useful for creating ``well formed''
@file{.cas} files.

The remaining options affect how XRoar attempts to cope with bad tape images
(images that, were they simply converted to audio files, would not load on a
real Dragon):

The @option{-tape-pad} option tries to make loading more reliable by
intercepting ROM calls and assuming extra leader bytes where appropriate.
Disable with @option{-no-tape-pad}.

The @option{-tape-pad-auto} option will, for @file{.cas} files, automatically
switch on leader padding when insufficient initial leader bytes are found at
the beginning of the file, otherwise it is left alone.  Disable with
@option{-no-tape-pad-auto}.  On by default.

Where available, these options can be changed on the fly in the GUI.


@node Disks
@section Disks

If a disk interface cartridge is selected, XRoar supports virtual disks.  Three
virtual disk formats are supported:

@multitable @columnfractions .20 .75
@headitem Extension @tab Description
@item @file{.dmk}
@tab Disk image file in a format defined by David Keil.  They store a lot of
information about the structure of a disk and support both single and double
density data.  All disk images are manipulated internally in (near enough) this
format.
@item @file{.jvc}, @file{.os9}, @file{.dsk}
@tab Disk image file in a basic sector-by-sector format with optional
header information.
@item @file{.vdk}
@tab Another disk image file format, used by PC-Dragon.
@end multitable

To insert a disk into a particular drive, press @kbd{Ctrl}+@var{[1-4]}.

When you attach a disk, it is read into memory, and subsequent disk operations
are performed on this in-memory copy.  Write enable defaults to on (so write
operations on the copy will work), but write back defaults to off, so updates
will not be written to the disk image file.  To toggle write enable, press
@kbd{Ctrl}+@var{[5-8]}, where the number to press is the drive number plus
4.  To toggle write back, press @kbd{Ctrl}+@kbd{Shift}+@var{[5-8]}.  Even
with write back enabled, image files will not be updated until the disk in a
virtual drive is changed, or you quit the emulator.

Where available, these options can also be changed on the fly in the GUI.

Write back can be set to default to on with the @option{-disk-write-back}
command line option.

The JVC format specifies that the default number of sides in a headerless image
is 1, but some disk images are distributed without headers that are
double-sided.  These cannot normally be distinguished from a single-sided disk
with double the number of tracks, but if an OS-9 filesystem is present, the
information is contained within the first sector.  Because this information may
be confused with other valid disk contents, the behaviour can be disabled with
@option{-no-disk-auto-os9}.  Disk images with the extension @file{.os9} without
headers always ignore this option, however.

You can create a new blank disk in a virtual drive by pressing
@kbd{Ctrl}+@kbd{Shift}+@var{[1-4]}.  You will be a prompted for a filename,
and the extension determines which type of file will be written.


@node ROM cartridges
@section ROM cartridges

ROM cartridge images have a @file{.rom} or @file{.ccc} extension.  Because
XRoar supports other types of cartridge, loading a ROM image actually just
creates a cartridge instance of type @samp{rom}.  @xref{Cartridges}.


@node Snapshots
@section Snapshots

XRoar can save out a snapshot of the emulated machine state and read the
snapshots back in later.  To save a snapshot, press @kbd{Ctrl}+@kbd{S}.
When using @kbd{Ctrl}+@kbd{L} to load a file, anything ending in @file{.sna}
will be recognised as a snapshot.

What is included in snapshots: Selected machine architecture, complete hardware
state, current keyboard map, filenames of attached disk image files.

What is @emph{not} (yet) included: Actual disk image data (only where to find
it), attached cassettes or cartridge ROM contents.


@node Binary files
@section Binary files

File types containing raw binary data to be loaded into RAM:

@multitable @columnfractions .15 .80
@headitem Extension @tab Description
@item .bin
@tab Binary file (DragonDOS or CoCo).  XRoar can load these directly into memory
and optionally autorun them.  Read-only
@item .hex
@tab Intel hex record.  An ASCII format that encodes binary data and
where in memory to load it.  Read-only
@end multitable


@iftex
@vskip 0pt plus 1filll
@end iftex

@node Firmware ROM images
@section Firmware ROM images

Firmware ROM image files are configured as part of a machine or a cartridge.
They have an extension of @file{.rom} or @file{.dgn}, and can be specified as:

@itemize @bullet
@item Complete path to a file.
@item Base filename of an image, to be discovered within a search path.
@item Base filename of an image, omitting the extension.  XRoar will search as above, appending the known ROM file extensions.
@item An @samp{@@} character followed by the name of a ROM list.
@end itemize

A ROM list is a comma-separated list of images, each following the rules above.
ROM lists may refer to other ROM lists.  Define a ROM list with
@option{-romlist @var{name}=@var{image}[,@var{image}]@dots{}}.  View the
defined ROM lists with @option{-romlist-print}.

To make life easier, the default image for each type of machine or cartridge
usually refers to a ROM list which contains all the corresponding filenames
seen ``in the wild'':

@multitable {RS-DOS with becker port} {Xdragondos_compatxx} {dplus49b, sdose6, ddos40, cdos20XXXXX}
@headitem Firmware ROM @tab ROM list @tab Canonical image names
@item Dragon 32 BASIC @tab @samp{@@dragon32} @tab @file{d32}
@item Dragon 64 32K BASIC @tab @samp{@@dragon64} @tab @file{d64_1}
@item Dragon 64 64K BASIC @tab @samp{@@dragon64_alt} @tab @file{d64_2}
@item Dragon 200-E 32K BASIC @tab @samp{@@dragon200e} @tab @file{d200e_1}
@item Dragon 200-E 64K BASIC @tab @samp{@@dragon200e_alt} @tab @file{d200e_2}
@item Dragon 200-E Charset@tab @samp{@@dragon200e_charset} @tab @file{d200e_26}
@item Tandy Colour BASIC @tab @samp{@@coco} @tab @file{bas13}, @file{bas12}, @file{bas11}, @file{bas10}
@item Tandy Extended BASIC @tab @samp{@@coco_ext} @tab @file{extbas11}, @file{extbas10}
@item DragonDOS @tab @samp{@@dragondos_compat} @tab @file{dplus49b}, @file{sdose6}, @file{ddos40}, @file{cdos20}
@item Delta System @tab @samp{@@delta} @tab @file{delta}
@item RS-DOS @tab @samp{@@rsdos} @tab @file{disk11}, @file{disk10}
@item RS-DOS with becker port @tab @samp{@@rsdos_becker} @tab @file{hdbdw3bck}
@item Orchestra 90-CC @tab @samp{orch90} @tab
@end multitable

The default search path for images specified only as a base filename varies by
platform, and is detailed in @ref{Getting started}.  This path can can be
overridden with the option @option{-rompath=@var{path}}, where @var{path} is a
colon-separated list of directories to search.  The path is parsed in the same
manner as the configuration file search path (see @ref{Getting started}).

The @env{XROAR_ROM_PATH} environment variable can also be used to specify the
search path, but this behaviour is deprecated and may be removed in a future
version.

A CRC32 value is calculated (and reported) for loaded ROM images.  XRoar uses
these CRCs to determine automatically whether certain breakpoints can be used
(e.g., for fast tape loading).  The lists of CRCs matched can be defined in a
similar way to ROM lists using the @option{-crclist
@var{list}=@var{crc}[,@var{crc}]@dots{}} option.  Each @var{crc} is a 8-digit
hex number preceeded by @samp{0x}, or the name of a nested list preceeded by
@samp{@@}.  Use this if you have a modified version of a BASIC ROM that
maintains compatible entry points with an original.  View the current lists
with @option{-crclist-print}.

Sometimes it may be useful to force CRC matching so that breakpoints apply
(e.g., you are modifying a ROM image and don't wish to have to add its CRC to
the match list each time you modify it).  The @option{-force-crc-match} option
forces the CRCs to be as if an original ROM image were loaded.


@node User interface
@chapter User interface

@menu
* User interface module::
* Video output::
* Audio output::
* Keyboard::
* Joysticks::
* Printing::
* Debugging::
* Keyboard shortcuts::
@end menu

@node User interface module
@section User interface module

The user interface depends on supporting toolkit packages as described in
@ref{Building from source}.  Selection of user interface module may affect
which other types of module are available: in particular, video output is
strongly tied to the user interface.

@table @option
@item -ui @var{module}
Select user-interface module.  @option{-ui help} to list compiled-in modules.
@end table

@subsection GTK+ user interface

Select with @option{-ui gtk2}.

This is the most full-featured user interface.  It provides extensive dynamic
menus, and control dialogues for cassette and disk files.  This is the
preferred interface under Linux.

Only one video module is usable with this user interface: @samp{gtkgl}.

@subsection SDL user interface

Select with @option{-ui macosx} (Mac OS X menus), @option{-ui windows32}
(Windows menus) or @option{-ui sdl} (no menus).

A more limited interface, still including an amount of menu-based control under
Mac OS X and Windows.  Other actions require the use of XRoar's keyboard
shortcuts.  Provides three video output modules: @samp{sdlgl} (OpenGL,
preferred), @samp{sdlyuv} (YUV, often accelerated under X11) and @samp{sdl}.
@option{-vo sdl} is the least capable, but most compatible; try this if you are
having problems with OpenGL.

Under Mac OS X, many operations are usable by pressing @kbd{Command}+@var{key}
as well as the usual shortcut of @kbd{Ctrl}+@var{key}.


@node Video output
@section Video output

@table @option

@item -vo @var{module}

Video output module to use.  Available modules depend on the selected
user-interface module.  @option{-vo help} for a list.

@item -fs

Start full-screen.  Toggle full-screen with @kbd{Ctrl}+@kbd{F} or @kbd{F11}.

@item -fskip @var{frames}

Specify frameskip.  Default is @samp{0}.  For slower machines.

@item -gl-filter @var{filter}

Filtering method to use when scaling the screen.  One of @samp{linear},
@samp{nearest} or @samp{auto} (the default).  OpenGL output modules only.

@item -invert-text

Start up with inverted text mode.

@item -ccr @var{renderer}

Cross-colour renderer.  Either @samp{simple} (very fast) or @samp{5bit} (fast,
more accurate).  Default is @samp{5bit}.

@end table

Real NTSC machines start in one of two cross-colour states at random.  Games
often prompt the user to ``Press Enter if the screen is red'', for example.
You can press @kbd{Ctrl}+@kbd{A}, to cycle through three modes: Off,
Blue-red and Red-blue.

Inverted text mode may be toggled by pressing @kbd{Ctrl}+@kbd{Shift}+@kbd{I}.


@node Audio output
@section Audio output

@table @option

@item -ao @var{module}

Select audio output module.  @option{-ao help} for a list.

@item -ao-device @var{device}

Module-specific device specifier.  e.g., @file{/dev/dsp} for OSS.

@item -ao-format @var{format}

Specify audio sample format.  @option{-ao-format help} for a list.

@item -ao-rate @var{hz}

Specify audio frame rate, where supported.  The default is taken from the
operating system if possible, otherwise it will usually be @samp{48000}.

@item -ao-channels @var{n}

Specify number of channels (1 or 2).  Default is usually 2.

@item -ao-fragments @var{n}

Specify number of audio fragments.

@item -ao-fragment-ms @var{ms}

Specify audio fragment size in milliseconds.

@item -ao-fragment-frames @var{frames}

Specify audio buffer size in frames.

@item -ao-buffer-ms @var{ms}

Specify total audio buffer size in milliseconds.

@item -ao-buffer-frames @var{frames}

Specify total audio buffer size in frames.

@item -fast-sound

Slightly faster audio support by ignoring certain uncommon state changes.

@item -volume @var{volume}

Specify audio volume (0 - 100).

@end table

Audio latency is a concern for emulators, so XRoar allows the buffering
characteristics to be configured with the fragment and buffer options above.
Not all audio modules support all options, but setting the total audio buffer
size will usually have an effect.  Bear in mind that any figures reported by
XRoar reflect what it was able to request, and won't include any extra
buffering introduced by the underlying sound system.

When the Orchestra 90-CC cartridge is attached, audio levels will be reduced
due to the need to mix in a stereo output.


@node Keyboard
@section Keyboard

The default mapping of host keys to emulated keys is based on the original
@emph{positions} of the keys, with certain exceptions: cursor keys are mapped
directly, @key{Escape} maps to the Dragon's @key{BREAK} key, and @key{Home}
maps to @key{CLEAR}.  Other keys may also be mapped to @key{CLEAR} if there is
a choice in your selected keymap that doesn't conflict with a regular character
in translated mode.

For position-based mapping, XRoar needs to be informed of the layout of the
host's keyboard.  If it is not the default (UK), use the @option{-keymap
@var{code}} option.

XRoar can also be put into ``translated'' keyboard mode, where characters typed
on a PC keyboard are translated into the equivalent keystrokes on the Dragon.
Use the @option{-kbd-translate} option to default to this mode.  Press
@kbd{Ctrl}+@kbd{Z} at any time to toggle between the two modes.

In translated mode, @kbd{Shift}+@kbd{Enter} is mapped to the Caps Lock
combination (@kbd{Shift}+@kbd{0} usually, @kbd{Shift}+@kbd{Enter} on the Dragon
200-E).  Similarly, @kbd{Shift}+@kbd{Space} is mapped to the ``pause output''
combination (@kbd{Shift}+@kbd{@@} usually, @kbd{Shift}+@kbd{Space} on the
Dragon 200-E).

@table @option

@item -keymap @var{code}
Specify host keyboard layout.  @option{-keymap help} for a list.  Default is
@samp{uk}.

@item -kbd-translate
Start up in ``translated'' keyboard mode.

@item -type @var{string}

Intercept ROM calls to type @var{string} into BASIC on startup.

@end table

The keyboards of the Dragon, Dragon 200-E and Tandy CoCo operate in the same
way, but the matrix and/or key layouts differ.  When you select a machine (see
@ref{Machines}), the appropriate layout is selected for you, but you can cycle
between the three by pressing @kbd{Ctrl}+@kbd{K}.

XRoar will simulate the ``ghosting'' effects inherent in a simple matrix
design, but the accuracy of this simulation will depend very much on your host
keyboard, which vary greatly in the amount of simultaneous keypresses they
support (for more information, search for ``NKRO'').


@node Joysticks
@section Joysticks

XRoar supports attached joysticks, or can emulate them using the keyboard or
mouse (``virtual joysticks'').  There are a few built-in configurations, or new
ones can be defined.  Here are the built-ins:

@multitable {kjoy0xxx} {First two axes and first two buttons of second physical joystickxxx}
@headitem Name @tab Description
@item @samp{joy0} @tab First two axes and first two buttons of first physical joystick
@item @samp{joy1} @tab First two axes and first two buttons of second physical joystick
@item @samp{kjoy0} @tab Keyboard based virtual joystick using cursor keys and @key{Left Alt}.
@item @samp{mjoy0} @tab Mouse based virtual joystick mapped to screen position
@end multitable

By default, @samp{joy0} (the first physical joystick) is mapped to the Dragon's
right joystick port, and @samp{joy1} (the second physical joystick) to the left
port.  Map different named joysticks with @option{-joy-right @var{name}} and
@option{-joy-left @var{name}}.  Right and left joystick mapping can be easily
swapped by pressing @kbd{Ctrl}+@kbd{Shift}+@kbd{J}.

A configured ``virtual joystick'' can be used by pressing
@kbd{Ctrl}+@kbd{J}.  The first press substitutes it for the right joystick,
the second press with the left joystick and a third press disables it again.
The virtual joystick defaults to the keyboard-based @samp{kjoy0} described
above, but can be reconfigured with @option{-joy-virtual @var{name}}.

A joystick configuration can be created or configured by selecting it by name
with @option{-joy @var{name}}, and then configuring its axes with
@option{-joy-axis @var{index}=@var{spec}} and buttons with @option{-joy-button
@var{index}=@var{spec}}.  In each case, @var{spec} has the syntax
@var{interface}:@var{args}, with @var{args} being a comma-separated list, the
format of which is specific to @var{interface}:

@multitable {physicalxxx} {screen-offset0,screen-offset1xxx} {joystick-index,button-indexxxx}
@headitem Interface @tab Axis args @tab Button args
@item @samp{physical} @tab @var{joystick-index},@var{[-]axis-index} @tab @var{joystick-index},@var{button-index}
@item @samp{keyboard} @tab @var{key-name0},@var{key-name1} @tab @var{key-name}
@item @samp{mouse} @tab @var{screen-offset0},@var{screen-offset1} @tab @var{button-number}
@end multitable

For physical joysticks a @samp{-} before the axis index inverts the axis.  Key
names for the keyboard interface depend on the underlying toolkit.  The default
screen offsets for the mouse interface are @samp{X=2,254} and
@samp{Y=1.5,190.5} which gives a nice spread.


@node Printing
@section Printing

XRoar supports redirecting the Dragon parallel printer output to a file or pipe
with the @option{-lp-file} or @option{-lp-pipe} option.  Printed data will be
sent to the appropriate stream.  Pressing @kbd{Ctrl}+@kbd{Shift}+@kbd{P}
will flush the current stream by closing it (so if the stream is a pipe, the
filter will complete).  The stream will be re-opened when any new data is sent.

The pipe feature allows you to use useful print filters such as
@command{enscript}, e.g., @option{-lp-pipe "enscript -B -N r -d
@emph{printer-name}"}.  This will send a job to your printer, using carriage
returns as line feeds (the Dragon default), each time you press
@kbd{Ctrl}+@kbd{Shift}+@kbd{P} (or exit the emulator).

@table @option

@item -lp-file @var{filename}
Append printer output to @var{filename}.

@item -lp-pipe @var{command}
Pipe printer output to @var{command}.

@end table

Note that the CoCo uses a serial printer port.  As full serial support is yet
to be added, a very limited form of print redirection is implemented for the
CoCo using a ROM BASIC intercept.  This is enough to support BASIC commands
like LLIST, but will not cope with programs implementing their own serial
routines.


@node Debugging
@section Debugging

XRoar can act as a remote target for GDB using a network socket.  When GDB
connects, emulation is stopped.  GDB can then inspect memory, instruct the
target to set breakpoints and watchpoints (read, write and access), single step
or continue execution.  A version of GDB patched to specifically support 6809
targets can also perform disassembly and inspect registers.  For more
information on how to use GDB, see the
@myuref{http://www.gnu.org/software/gdb/documentation/, GDB Documentation}.

Enable the GDB remote target with @option{-gdb}.  The default IP and port for
the target are @samp{127.0.0.1} and @samp{65520}.  These can be overridden with
the @option{-gdb-ip} and @option{-gdb-port} options.

XRoar also supports a simpler ``trace mode'', where it will dump a disassembly
of every instruction it executes to the console.  Toggle trace mode on or off
with @kbd{Ctrl}+@kbd{V}.  Trace mode can be enabled from startup with the
@option{-trace} option.

User-interface debugging flag can be enabled with @option{-debug-ui
@var{value}}, where only one value is currently supported:

@table @asis
@item 0x0001
Keyboard event debugging.
@end table

Hex & binary file debugging can be enabled with @option{-debug-file
@var{value}}, where the value is a bitwise ORing of the following:

@table @asis
@item 0x0001
Print summary information such as load or exec addresses.
@item 0x0002
Hex dump of all data read into memory.
@end table

Floppy controller debugging can be enabled with @option{-debug-fdc @var{value}},
where the value is a bitwise ORing of the following:

@table @asis
@item 0x0001
Show FDC commands.
@item 0x0002
Show all FDC states.
@item 0x0004
Hex dump of read/write sector data.
@item 0x0008
Hex dump of becker port conversation data.
@end table

The GDB stub can also emit debug information about its own operation with
@option{-debug-gdb @var{value}}, where value is a bitwise ORing of:

@table @asis
@item 0x0001
Connection open and close.
@item 0x0002
Show packet data.
@item 0x0004
Checksum reporting.
@item 0x0008
Report on general queries.
@end table

The special value argument of -1 parses as ``all bits set'', and so enables all
corresponding debug options.

XRoar prints various other informational messages to standard output by
default, including when the state of certain toggles is modified.  Verbosity
can be changed with the @option{-verbose @var{level}} option.  @option{-quiet}
is equivalent to @option{-verbose 0}.  Levels are:

@table @asis
@item 0
Quiet.  Only warnings and errors printed.
@item 1
Print startup diagnostics and emulator state changes (default).
@item 2
Report some emulated machine state changes.
@item 3
Miscellaneous internal debugging.
@end table

XRoar can be told to exit after a number of (emulated) seconds with the
@option{-timeout @var{seconds}} option.


@node Keyboard shortcuts
@section Keyboard shortcuts

A summary of commonly available shortcuts.

@table @asis
@item @kbd{Ctrl}+@kbd{A}
Cycle through cross-colour video modes (hi-res only).
@item @kbd{Ctrl}+@kbd{D}
Open disk control dialogue (GTK+ only).
@item @kbd{Ctrl}+@kbd{E}
Toggle DOS emulation on/off - reset to take effect.
@item @kbd{Ctrl}+@kbd{F}, @kbd{F11}
Toggle full screen mode.
@item @kbd{Ctrl}+@kbd{Shift}+@kbd{H}, @kbd{Pause}
Toggles pause mode (HALTs the CPU).  As seen on the Dynacom MX-1600.
@item @kbd{Ctrl}+@kbd{Shift}+@kbd{I}
Toggle text mode inverse video.
@item @kbd{Ctrl}+@kbd{J}
Cycle through joystick emulation modes (None, Right, Left).
@item @kbd{Ctrl}+@kbd{Shift}+@kbd{J}
Swap left and right joysticks.
@item @kbd{Ctrl}+@kbd{K}
Cycle through Dragon, Dragon 200-E and CoCo keyboard layouts.
@item @kbd{Ctrl}+@kbd{L}
Load a file (see below).
@item @kbd{Ctrl}+@kbd{Shift}+@kbd{L}
Load a file and attempt to autorun it where appropriate.
@item @kbd{Ctrl}+@kbd{M}
Cycle through emulated machine types (resets machine).
@item @kbd{Ctrl}+@kbd{Shift}+@kbd{P}
Flush printer output.
@item @kbd{Ctrl}+@kbd{Q}
Quit emulator.
@item @kbd{Ctrl}+@kbd{R}
Soft reset emulated machine.
@item @kbd{Ctrl}+@kbd{Shift}+@kbd{R}
Hard reset emulated machine.
@item @kbd{Ctrl}+@kbd{S}
Save a snapshot.
@item @kbd{Ctrl}+@kbd{T}
Open the tape control dialogue (GTK+ only).
@item @kbd{Ctrl}+@kbd{V}
Toggle trace mode.
@item @kbd{Ctrl}+@kbd{W}
Attach a virtual cassette file for writing.
@item @kbd{Ctrl}+@kbd{Z}
Enable keyboard translation mode.
@item @kbd{F12}
While held, the emulator will run at the maximum possible speed.
@item @kbd{Shift}+@kbd{F12}
Toggle rate limiting.  Emulator will run at maximum speed until pressed again.
@end table


@node Troubleshooting
@chapter Troubleshooting

Some commonly encountered issues:

@itemize @bullet
@item I only see a checkerboard pattern of orange and inverse @samp{@@} signs.
@end itemize

This probably indicates that XRoar could not locate any BASIC ROM images.
Acquire some and put them in the directory appropriate to your platform.  XRoar
tries to find ROMs for machines in the following order if you do not specify a
default machine: Dragon 64, Dragon 32, CoCo.

@float Figure,fig:norom
@image{xroar-screens, 4.15625in,, Emulator with and without BASIC ROM, png}
@caption{Emulator with and without BASIC ROM}
@end float

@itemize @bullet
@item A black window appears.  Commands typed blind appear
to work.
@end itemize

This has cropped up a few times for people using Windows.

By default, XRoar tries to use OpenGL for its video output.  Windows versions
even as late as Windows 7 have been reported to come with drivers that do not
even support basic texture rendering (OpenGL Extension Viewer reports ``Max
texture image units: 0'').  If this is the case, try running with the
@option{-vo sdl} option, which should select an unaccelerated, non-scalable
output.

@itemize @bullet
@item This program is supposed to be in colour, but all I see is black & white.
@end itemize

Try pressing @kbd{Ctrl}+@kbd{A} one or more times.  What this really means
is that you're used to running the program on an NTSC machine, and it makes use
of cross-colour, but XRoar is emulating a PAL machine.  Try starting with
@option{-default-machine tano} or @option{-default-machine cocous}.

@float Figure,fig:artifacts
@image{xroar-timebandit-af, 6.25in,, @cite{Time Bandit, Dunlevy & Lafnear, 1983} in different artifact modes, png}
@caption{@cite{Time Bandit, Dunlevy & Lafnear, 1983} in different artifact modes}
@end float


@node Acknowledgements
@chapter Acknowledgements

I made reference to the MAME 6809 core for clues on how the overflow bit in the
condition code register was handled.

Thanks to all the people on the
@myuref{http://archive.worldofdragon.org/phpBB3/, Dragon Archive Forums} for
helpful feedback and insight.

Darren Atkinson's @cite{Motorola 6809 and Hitachi 6309 Programmers Reference}
has been very useful for 6309 support and fleshing out some of the illegal
instructions on the 6809.

@bye
