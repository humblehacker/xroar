\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename xroar.info
@dircategory Emulators
@direntry
* XRoar: (xroar).               Dragon & Tandy CoCo emulator.
@end direntry

@include version.texi

@settitle XRoar Dragon Emulator Manual
@afourpaper
@c @setchapternewpage off
@ifclear VERSION
@set VERSION Unknown
@end ifclear
@c %**end of header

@c @iftex
@c @macro myuref {link, text}
@c @uref{\link\, \text\}@footnote{\link\}
@c @end macro
@c @end iftex

@c @ifnottex
@macro myuref {link, text}
@uref{\link\, \text\}
@end macro
@c @end ifnottex

@copying
This manual is for XRoar (version @value{VERSION}), a Dragon and
Tandy Colour Computer emulator.

Copyright @copyright{} 2021
Ciaran Anscomb.
@end copying

@titlepage
@title XRoar @value{VERSION}
@subtitle Dragon and Tandy Colour Computer emulator
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Introduction

XRoar is a Dragon and Tandy Colour Computer emulator that runs on a wide
variety of platforms.  Some features are:

@itemize @bullet
@item Emulates Dragon 32, 64, and 200-E; Tandy CoCo 1, 2, & 3.
@item Emulates DragonDOS, Delta and RSDOS disk systems.
@item Emulates the Orchestra 90-CC stereo sound cartridge.
@item Supports both raw and translated keyboard modes.
@item Reads and writes virtual cassettes (compact @file{.cas} files and audio files).
@item Reads and writes VDK, JVC and DMK format virtual floppy diskettes.
@item Saves and loads machine snapshots.
@item Provides a GDB target for remote debugging.
@item Games Master Cartridge support, including SN76489 sound chip.
@item MOOH RAM expansion + SPI support.
@item Glenside IDE support.
@item Initial limited support for the Tandy MC-10.
@end itemize

XRoar is easily built from source under Linux, and binary packages are provided
for Mac OS X and Windows.  @xref{Installation}.

XRoar can also be compiled to WebAssembly, and redistributing it in this form
may provide a convenient way for users to run your Dragon software.  See
@myuref{https://www.6809.org.uk/xroar/online/, XRoar Online} for an example.

XRoar is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

XRoar is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <https://www.gnu.org/licenses/>.


@ifnottex
@menu
* Getting started::
* Configuration::
* Supported hardware::
* Files::
* User interface::
* Acknowledgements::
* Installation::
* Keyboard shortcuts::
@end menu
@end ifnottex

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Getting started, Configuration, Top, Top
@chapter Getting started

@menu
* Prerequisites::
* User-interface introduction::
* Running programs::
* Troubleshooting::
@end menu

@node Prerequisites
@section Prerequisites

After installing XRoar (see @ref{Installation}), the first thing to do is make
sure you have the firmware ROM images available for the system you wish to
emulate.  Without these, you will see rubbish on the screen (probably a
checkerboard pattern, reflecting the initial state of RAM, see
@ref{Troubleshooting}).

These firmware images can be transferred from your original machine (with some
effort, outside the scope of this document) or more likely found online on one
of the archive websites.  XRoar searches certain directories for these images,
depending on platform, including (where @samp{~} indicates your "home
directory"):

@multitable {Unix/Linux} {:~/Local Settings/Application Data/XRoar:~/Application Data/XRoar.}
@headitem Platform @tab Normal ROM path
@item Unix/Linux @tab @file{~/.xroar/roms}
@item Windows @tab @file{~/Documents/XRoar/roms}
@item Mac OS X @tab @file{~/Library/XRoar/roms}
@end multitable

Firmware ROM image files should have a @file{.rom} extension, and be headerless
(so their file size will be an exact power of two bytes).  For most use cases,
you'll need the BASIC ROM image(s) and a disk controller ROM image.  Here are
the expected filenames for the most common images:

@multitable {Tandy Microcolour BASIC (MC-10)} {d200e_26.romXX} {32K (32768 bytes)}
@headitem Firmware ROM @tab Filename @tab File size
@item Dragon 32 BASIC @tab @file{d32.rom} @tab 16K (16384 bytes)
@item Dragon 64 32K BASIC @tab @file{d64_1.rom} @tab 16K
@item Dragon 64 64K BASIC @tab @file{d64_2.rom} @tab 16K
@item DragonDOS @tab @file{ddos10.rom} @tab 8K (8192 bytes)
@item Tandy Colour BASIC @tab @file{bas13.rom} @tab 8K
@item Tandy Extended BASIC @tab @file{extbas11.rom} @tab 8K
@item Tandy Super ECB (CoCo 3) @tab @file{coco3.rom} @tab 32K (32768 bytes)
@item Tandy Super ECB (PAL CoCo 3) @tab @file{coco3p.rom} @tab 32K
@item Tandy RS-DOS @tab @file{disk11.rom} @tab 8K
@item Tandy Microcolour BASIC (MC-10) @tab @file{mc10.rom} @tab 8K
@end multitable

Other machines (in particular the less common Dragon 200-E) will need a
different set of ROM images, and other supported peripherals may also need
their own firmware.  See @ref{Supported hardware} for more information on the
images that specific hardware emulation expects to find.


@node User-interface introduction
@section User-interface introduction

With the prerequisites satisfied, on running XRoar you should now be presented
with a window showing an emulated machine with a menu bar at the top showing
(at least) @clicksequence{File}, @clicksequence{View}, @clicksequence{Hardware}
and @clicksequence{Tool} menus.  Mac OS users will see the menu bar at the top
of the whole screen instead.  There are often keyboard shortcuts for these,
detailed throughout this manual and listed in @ref{Keyboard shortcuts}.

You can put XRoar into fullscreen mode by selecting @clicksequence{View
@click{} Full Screen}, but you will notice that the menu bar disappears.  To
return to windowed mode, use the keyboard shortcut @kbd{@key{CTRL}+F}, or just
@kbd{@key{F11}}.

As you type, you may notice that certain keys don't produce the character you
pressed.  This is because by default, XRoar tries to map keys such that they
closely approximate their locations on the machine being emulated, so
@kbd{minus} on a modern PC keyboard types @kbd{colon} in the emulated machine.
This is good for playing games, where key placement is often important.  Be
aware that some keys don't have useful equivalents on modern keyboards: for
@kbd{CLEAR}, press @kbd{HOME}, or the backtick key; for @kbd{BREAK}, press
@kbd{ESCAPE}.

You can tell XRoar to translate PC keys to emulated keypresses by selecting
@clicksequence{Tool @click{} Keyboard Translation}.  For more about the
keyboard, including mapping keys, see @ref{Keyboard}.

XRoar supports real joysticks, and simulating joysticks with the keyboard or
mouse.  You can select which method is used for each of the emulated joysticks
in the @clicksequence{Hardware @click{} Right Joystick} and
@clicksequence{Hardware @click{} Left Joystick} menus.  The
@clicksequence{Keyboard} option maps the cursor keys to joystick directions
(meaning they become unavailable to type as actual emulated cursor keys) and
@key{ALT} to the firebutton.  The @clicksequence{Mouse} option relates the
pointer position within the window to a joystick's floating position, with the
left mouse button bound being the firebutton.  Much of this can be configured,
see @ref{Joysticks}.

The @clicksequence{Hardware} menu also allows you to select which machine to
emulate, and attach a cartridge to the running machine.  If ROM images were
found for it, you'll probably see that a disk cartridge is already attached.
Swapping cartridges 'live' is not something you'd generally do on a real
machine, and if you change the selection, you may need to select
@clicksequence{Hardware @click{} Hard Reset} to see the effect.


@node Running programs
@section Running programs

XRoar tries to make this easy; after all, it's probably why you installed an
emulator in the first place.  Select @clicksequence{File @click{} Run} to open
a file requester, and select the program media image; in the majority of cases,
and so long as the program was intended for the machine you have selected,
XRoar will "do the right thing" to try and start it.

As with much automation, we can't forsee every eventuality, and sometimes
you'll have to launch the program manually.  In this case, you can still simply
attach the image (@emph{without} autorunning it) by selecting
@clicksequence{File @click{} Load}, then follow the programs own instructions.

Here's what XRoar tries to do with various types of media image.  XRoar uses
filename extensions to decide how to handle an image, so be sure to check that
this is correct.  For more a list of supported file formats, see @ref{Files}.

ROM cartridge images typically have a @file{.rom} extension (just like the
firmware ROM images).  XRoar will create and insert a ROM cartridge (it will
appear in the list under @clicksequence{Hardware @click{} Cartridge}) and, if
autorunning, set it up to generate the autostart signalling and hard reset the
emulated machine.

For cassette images (usually a @file{.cas} or @file{.wav}), XRoar will try to
determine the type of the first program in the image, and autorunning will
issue the @samp{CLOAD} (for BASIC) or @samp{CLOADM} (for machine code) command
to load it, followed by @samp{EXEC} or @samp{RUN} as appropriate.
@xref{Cassettes}.

The only standard way of autostarting the program on a disk image is through
its boot sectors, so in this case XRoar will issue the @samp{BOOT} (Dragon) or
@samp{DOS} (Tandy CoCo) command.  These are the most likely to fail as many
disk images do not have boot sectors: read the instructions for yours!  Disk
images can come in many formats, and the file extension is used to
discriminate; the most common are VDK (@file{.vdk} extension) or JVC
(@file{.dsk} extension).  @xref{Floppy Disks}.


@node Troubleshooting
@section Troubleshooting

@subsection No BASIC ROM

The most common issue when first using XRoar.  You start the emulator and only
see a checkerboard pattern of orange and inverse @samp{@@} signs (or on the
CoCo 3, some other pattern that's not the usual copyright messages).  This
probably indicates that XRoar could not locate any BASIC ROM images.  Acquire
some and put them in the directory appropriate to your platform.

@float Figure,fig:norom
@image{xroar-screens, 4.15625in,, Emulator with and without BASIC ROM, png}
@caption{Emulator with and without BASIC ROM}
@end float

@subsection Program lacks colour

You remember a program being in colour, but all you see is black and white.

American software was often written to exploit cross-colour artefacts, where
alternating patterns of black and white would "trick" the TV into displaying
colour.  XRoar supports this, and should enable it by default when you choose
an NTSC machine.  If you're running an NTSC game on a PAL machine, you can
still force XRoar to render the colours by selecting a cross-colour option from
@clicksequence{View @click{} TV Input}.  There are also options that affect the
fidelity of this rendering.  See @ref{Video output} for more details.

@float Figure,fig:artefacts
@image{xroar-timebandit-af, 6.25in,, @cite{Time Bandit, Dunlevy & Lafnear, 1983} in different cross-colour modes, png}
@caption{@cite{Time Bandit, Dunlevy & Lafnear, 1983} in different cross-colour modes}
@end float

@subsection Debug messages

XRoar prints diagnostic messages to standard output and standard error, and
these may help narrow down a problem.  You can increase their verbosity with
various command-line options.  See @ref{Debugging} for more information.

Windows generally does not show these messages by default. but you can
allocate a console by running XRoar from the command line and including
@option{-C} as the very first option.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Configuration
@chapter Configuration

This manual details the options available for configuring XRoar.  Each option
can be passed on the command line or placed in a configuration file called
@file{xroar.conf}.  @file{xroar.conf} is read first, then command line options
take precedence.  Directives are listed in @file{xroar.conf} one per line.

Lines in the configuration file contain an option, possibly followed by
whitespace and a value.  Trailing whitespace is ignored.  Empty lines are
skipped, and any line where the first non-whitespace character is a hash
(@samp{#}) is treated as a comment.

When specified on the command line, options require a leading dash (@samp{-}),
but in the configuration file, this is optional.  Many options may be preceded
by @samp{no-} to invert their meaning or reset their value.

If a value contains special characters, or if you want trailing whitespace to
be included in the value, you must ``escape'' those characters.  Sections
contained within pairs of single or double quotes are escaped, except the
backslash (@samp{\}) which introduces an escape sequence:

@multitable @columnfractions .13 .83
@headitem Sequence @tab Description
@item @samp{\0} @tab Null (NUL), ASCII 0.  Note that this is only permitted when
@emph{not} followed by another octal digit, as it may be confused with an octal
byte, so it may be preferable to use @samp{\x00} instead.
@item @samp{\a} @tab Bell (BEL), ASCII 7, no equivalent on the Dragon keyboard.
@item @samp{\b} @tab Backspace (BS), ASCII 8, @kbd{LEFT}.
@item @samp{\e} @tab Escape (ESC), ASCII 27, no equivalent on the Dragon keyboard, but
mapped to @kbd{BREAK} by the @option{-type} option.
@item @samp{\f} @tab Form Feed (FF), ASCII 12, @kbd{CLEAR}.
@item @samp{\n} @tab Newline (NL), ASCII 10, @kbd{DOWN}.  Not usually used by the
Dragon as a line ending, instead try @samp{\r}.
@item @samp{\r} @tab Carriage Return (CR), ASCII 13, @kbd{ENTER}.
@item @samp{\t} @tab Horizontal Tab (HT), ASCII 9, @kbd{RIGHT}.
@item @samp{\v} @tab Vertical Tab (VT), ASCII 11, no equivalent on the Dragon keyboard.
@item @samp{\@emph{nnn}} @tab 8-bit byte with value specified as a three-digit octal
number, @emph{nnn}.
@item @samp{\x@emph{hh}} @tab 8-bit byte with value specified as a two-digit
hexadecimal number, @emph{hh}.
@item @samp{\u@emph{hhhh}} @tab 16-bit Unicode codepoint specified as a four-digit
hexadecimal number, @emph{hhhh}.  Internally, this will be encoded as UTF-8.
@end multitable

Any other character following a backslash---including another backslash---is
included verbatim.  For example, this will be necessary in the configuration
file under Windows when file paths include the backslash as a directory
separator.

On the command line, it is assumed that your shell will handle argument
quoting, so any quote characters will be included verbatim.  Escape sequences
are still parsed, except when an option expects a filename, as shells often use
their own escaping mechanisms when autocompleting filename arguments.

@ref{Installation} lists good default locations for @file{xroar.conf}, but it
is actually searched for in a list of directories.  You can override this
search path with the @env{XROAR_CONF_PATH} environment variable, which contains
a colon-separated (@samp{:}) list of directories.  Here are the defaults:

@multitable {Mac OS X.} {:~/Local Settings/Application Data/XRoar:~/Application Data/XRoar.}
@headitem Platform @tab Default @env{XROAR_CONF_PATH}
@item Unix/Linux @tab @file{~/.xroar:@emph{prefix}/etc:@emph{prefix}/share/xroar}
@item Mac OS X @tab @file{~/Library/XRoar:~/.xroar:@emph{prefix}/etc:@emph{prefix}/share/xroar}
@item Windows @tab @file{:~\Documents\XRoar:~\AppData\Local\XRoar:~\AppData\Roaming\XRoar}
@end multitable

Note the leading @samp{:} in the Windows default indicates an empty entry,
meaning it will look in the current working directory first (i.e. you can put
@file{xroar.conf} into the directory from which you run XRoar).

A leading tilde character (@samp{~}) indicates the user's home directory: the
@env{HOME} environment variable on Unix systems, or @env{USERPROFILE} on
Windows.  @emph{prefix} is the installation prefix, which is usually
@file{/usr/local}.

To bypass the search path and start XRoar using a specific configuration file,
pass @option{-c @var{filename}} as the very first option to XRoar.

To print the current configuration to standard output (suitable for redirection
to a config file), run with @option{-config-print}.  This will include all the
built-in machine and cartridge definitions.  For a complete version including
default values, use @option{-config-print-all}.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Supported hardware
@chapter Supported hardware

@menu
* Machines::
* Cartridges::
@end menu


@node Machines
@section Machines

With no other options, XRoar searches the ROM path and determines which
supported machine has firmware ROM images are available.  It tries in this
order: Dragon 64, Dragon 32, Tandy CoCo.  This can be overridden with the
@option{-default-machine @var{name}} option.  XRoar has built-in configurations
for the following machines:

@multitable @columnfractions 0.15 0.85
@headitem Name @tab Description
@item @samp{dragon32} @tab Dragon 32 (PAL).
@item @samp{dragon64} @tab Dragon 64 (PAL).
@item @samp{dragon200e} @tab Dragon 200-E (PAL).
@item @samp{tano} @tab Tano Dragon (NTSC).
@item @samp{coco} @tab Tandy Colour Computer 1/2 (PAL).
@item @samp{cocous} @tab Tandy Color Computer 1/2 (NTSC).
@item @samp{coco2b} @tab Tandy Colour Computer 1/2 (PAL, T1).
@item @samp{coco2bus} @tab Tandy Color Computer 1/2 (NTSC, T1).
@item @samp{coco3} @tab Tandy Colour Computer 3 (NTSC).
@item @samp{coco3p} @tab Tandy Colour Computer 3 (PAL).
@item @samp{mx1600} @tab Dynacom MX-1600 (PAL-M).
@item @samp{mc10} @tab Tandy MC-10.
@end multitable

You can create new machine profiles or reconfigure existing ones.  Select or
create a machine profile with @option{-machine @var{name}}, and use the
following options to modify it:

@table @option

@item -machine-desc @var{name}
Description shown in @option{-machine help}.

@item -machine-arch @var{arch}
Base machine architecture.  One of @samp{dragon64}, @samp{dragon32},
@samp{coco}, @samp{coco3} or @samp{mc10}.

@item -machine-cpu @var{cpu}
Fitted CPU.  One of @samp{6809} or @samp{6309}.  Not applicable to the MC-10.

@item -bas @var{rom}
ROM image to use for Colour BASIC (CoCo and MC-10 only).

@item -extbas @var{rom}
ROM image to use for Extended BASIC (or Super Extended BASIC on the CoCo 3).

@item -altbas @var{rom}
64K-mode Extended BASIC for Dragon 64 & Dragon 200-E.

@item -no-bas
@itemx -no-extbas
@itemx -no-altbas
Indicate the corresponding ROM is not fitted in this machine.

@item -ext-charset @var{rom}
ROM image to use for external character generator.

@item -tv-type @var{type}
One of @samp{pal}, @samp{ntsc} or @samp{pal-m}.  PAL-M is treated the same as
NTSC, except with magenta-green cross-colour instead of blue-red (simulated
composite rendering only at the moment).

@item -tv-input @var{input}
One of @samp{cmp} (composite video, no cross-colour), @samp{cmp-br} (composite
video, blue-red cross-colour), @samp{cmp-rb} (composite video, red-blue
cross-colour) or @samp{rgb} (RGB video, CoCo 3 only).

@item -vdg-type @var{type}
Indicate the VDG variant fitted.  One of @samp{6847} or @samp{6847t1}.

@item -ram @var{kbytes}
Amount of RAM fitted in kilobytes.  Valid sizes are 4-64K for Dragon and Tandy
CoCo 1/2; 128K or 512K for the Tandy CoCo 3; 2K, 4K or 20K for the Tandy MC-10.

@item -machine-cart @var{name}
Default cartridge to attach.  @xref{Cartridges}.

@item -no-machine-cart
Indicate that XRoar is not to automatically attempt to attach a DOS cartridge
to this machine (the default is to try).

@end table

For example, if the following lines were placed in your @file{xroar.conf}, a
new machine could be selected with @option{-default-machine pippin}:

@example
machine pippin
  machine-desc "Dragon Pippin (prototype)"
  machine-arch dragon32
  ram 16
@end example

XRoar's CoCo 3 support is recent and known to contain some slight timing
errors.  Most programs work with it though.

XRoar now contains @emph{very} early support for the Tandy MC-10, but it is
unfinished, and much is known not to work.


@node Cartridges
@section Cartridges

You can create new cartridge profiles or reconfigure existing ones.  Select or
create a cartridge profile with @option{-cart @var{name}}, and use the
following options to modify it:

@table @option

@item -cart-desc @var{text}

Cartridge description shown in @option{-cart help}.

@item -cart-arch @var{arch}

Cartridge architecture.  One of @samp{dragon-cart} or @samp{mc10-cart}.

@item -cart-type @var{type}

Cartridge type.  See below for list.

@item -cart-rom @var{filename}

The ROM image specified will be mapped from $C000.

@item -cart-rom2 @var{filename}

The ROM image specified will be mapped from $E000.

@item -cart-becker

Enable Becker port where supported.

@item -cart-autorun

Auto-start cartridge using FIRQ.

@end table

XRoar supports many types of cartridge (the argument to @option{-cart-type}).
The following are valid for the @samp{dragon-cart} architecture:

@multitable @columnfractions 0.15 0.85
@headitem Name @tab Description
@item @samp{rom} @tab ROM cartridge, e.g. most cartridge games.
@item @samp{dragondos} @tab DragonDOS, the official Dragon disk system from Dragon Data.
@item @samp{delta} @tab Premier Microsystems' alternative Dragon disk system, Delta.
@item @samp{rsdos} @tab Tandy's RSDOS for the CoCo.
@item @samp{gmc} @tab John Linville's Games Master Cartridge.
@item @samp{orch90} @tab Orchestra 90-CC stereo 8-bit DAC cartridge.
@item @samp{ide} @tab Glenside IDE interface.
@item @samp{nx32} @tab Tormod Volden's NX32 RAM expansion cartridge.
@item @samp{mooh} @tab Tormod Volden's MOOH RAM expansion cartridge.
@item @samp{mpi} @tab Multi-Pak Interface.
@item @samp{mpi-race} @tab RACE Computer Expansion Cage.
@end multitable

There are no cartridges usable for the @samp{mc10-cart} architecture yet.

Built-in cartridge profiles exists with sensible defaults for each of the
cartridge types except @samp{rom} (for which a profile is simply created when
you try to autorun a ROM image), each with the same name as the type.

Defining new cartridge profiles is most usefully done in the configuration
file, for example:

@example
cart mydos
  cart-desc "SuperDOS E6"
  cart-type dragondos
  cart-rom sdose6.rom
  cart-rom2 dosdream.rom
@end example

This will define a cartridge called @samp{mydos} as a DragonDOS cartridge with
its ROM replaced with @file{sdose6.rom}, and an additional ROM called
@file{dosdream.rom} (this was my setup in the 80s - DOS Dream is a very useful
ROM-based editor/assembler/deugger that coexists with DragonDOS - advert over).

XRoar will automatically attempt to find a disk interface relevant to the
current machine unless a specific default has been configured for the machine
with @option{-machine-cart}, or automatic selection is disabled with the
@option{-no-machine-cart} option.

Selecting a ROM image file with the @option{-load} or @option{-run} command
line options, or with @kbd{@key{CTRL}+L} or
@kbd{@key{CTRL}+@key{SHIFT}+L}, will attach a ROM cartridge.

Within the emulator, cartridges can be enabled or disabled by pressing
@kbd{@key{CTRL}+E}.  You will almost certainly want to follow this with a
hard reset (@kbd{@key{CTRL}+@key{SHIFT}+R}).


@subsection Becker port

XRoar supports an emulator-only feature that enables it to connect to a server
using a TCP connection and access remote facilities such as disk images and 
MIDI devices---the @dfn{Becker port}.  This appears as a memory-mapped device,
and XRoar supports it as an optional feature of many cartridge types.

Enable this port when configuring a cartridge with @option{-cart-becker}.  The
@option{-becker} option tells XRoar to prefer a cartridge with it enabled when
automatically selecting one.

The IP and port to connect to can be specified with the @option{-becker-ip} and
@option{-becker-port} options.  These default to @samp{127.0.0.1} and
@samp{65504} respectively, matching the defaults for DriveWire 4, the most
popular server application used to provide such facilities.


@node DragonDOS
@subsection DragonDOS

The official Dragon Data disk system for the Dragon.  Supports 80 track, double
sided, double-density floppy disks.

Emulation supports the Becker port mapped to $FF49/$FF4A.


@node Games Master Cartridge
@subsection Games Master Cartridge

The Games Master Cartridge (@samp{gmc}), created by John Linville, provides the
ability to bank switch up to 64K of cartridge ROM, along with an on-board
SN76489 sound chip.

This cartridge type is selected automatically (and configured to autostart) if
you autorun a ROM image larger than 16K.


@node Glenside IDE controller
@subsection Glenside IDE controller

The @samp{ide} cartridge type emulates a Glenside IDE controller mapped to
addresses $FF50--$FF58.  The Becker port is supported.

The controller supports up to two drives, and you can specify the image to use
in each with @option{-load-hd0 @var{filename}} or @option{-load-hd1
@var{filename}}.  If @var{filename} does not exist, a 256MB empty image is
created when the controller first tries to access it.

Sectors are 512 bytes, and while some software may use all 512, others only
access 256 bytes per sector, padding the other 256 bytes (or simply doubling
them up).


@node Multi-Pak Interface
@subsection Multi-Pak Interface

The Multi-Pak Interface (@samp{mpi}) is a CoCo add-on by Tandy that allows up
to four cartridges to be connected, selectable by software or hardware switch.

The RACE Computer Expansion Cage is a Dragon add-on by RACE similar to the MPI.
Addressing and behaviour differs.

If you attach either Multi-Pak Interface (MPI), you'll want to populate one or
more of its slots (numbered 0-3).  Use @option{-mpi-load-cart
[@var{slot}=]@var{name}} to attach a named cartridge to the specified (or
next) slot.  Configure the initially selected slot with @option{-mpi-slot
@var{slot}}.

It's not recommended to load more than one DOS cartridge into the MPI.
As things stand, only the last one (in slot order) will have the emulated
drives properly connected.


@node NX32 and MOOH cartridges
@subsection NX32 and MOOH cartridges

Two memory expansion cartridges created by Tormod Volden for the Dragon.  Both
accept an SD card, and you can specify the backing image for this with the
@option{-load-sd @var{filename}} option.  SD card images have no header
information and contain 256-byte sectors.

The earlier NX32 provides simple bank switching, where the MOOH provides
extensive MMU functionality very like that in the Tandy CoCo 3.


@node Orchestra 90-CC sound cartridge
@subsection Orchestra 90-CC sound cartridge

A simple expansion that provides two 8-bit DACs for stereo sound (but still
driven by the CPU).  An on-board ROM for the CoCo provides an interface to
composition, but if autorun is disabled, the hardware itself works fine on the
Dragon.


@node RS-DOS
@subsection RS-DOS

Tandy's disk interface for the CoCo.  Typically supports only 35-track
single-sided double-density disks, though more is accessible using OS-9.

Emulation supports the Becker port.


@c MC-10 16K RAM cartridge


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Files
@chapter Files

@table @option

@item -load @var{filename}

Load or attach @var{filename}.  XRoar will try to do the right thing based on
the file type (usually determined by file extension).

@item -run @var{filename}

As @option{-load}, but try to autorun the file after attaching.

@item -load-fd@var{X} @var{filename}

Load disk image file @var{filename} into drive @var{X} (0--3).  @option{-load}
can also do this, populating each drive in turn, but this option allows you to
be more specific.

@item -load-hd@var{X} @var{filename}

Use @var{filename} as the hard disk image for drive @var{X} (0 or 1).  The file
will be created as a 256MB image if it does not exist.  512 byte sectors with
2*512 bytes of header information.  Used by the Glenside IDE controller (see
@ref{Glenside IDE controller}).

@item -load-sd @var{filename}

Use @var{filename} as the SD card image.  Used by the NX32 and MOOH memory
expansion boards (see @ref{NX32 and MOOH cartridges}).

@end table

In general, files can be attached on the command line with @option{-load
@var{filename}}, or by pressing @kbd{@key{CTRL}+L}.  XRoar judges the type of
file based on its filename extension.  To attempt to intelligently autorun a
file, use @option{-run @var{filename}} or press @kbd{@key{CTRL}+@key{SHIFT}+L}.
See @ref{Running programs} for the methods XRoar will use to autorun a file.

@menu
* Cassettes::
* Floppy Disks::
* ROM cartridges::
* Snapshots::
* Binary files::
* Firmware ROM images::
@end menu


@node Cassettes
@section Cassettes

XRoar supports three types of cassette image:

@multitable @columnfractions .15 .80
@headitem Extension @tab Description
@item @file{.cas}, @file{.c10}
@tab Cassette file.  Simple binary representation of data contained on a
tape.  CUE support appends metadata describing cycle widths and representing
silence.
@item @file{.wav}
@tab Cassette audio file.  XRoar can read sampled audio from original
cassettes.
@item @file{.bas}, @file{.asc}
@tab ASCII BASIC file.  XRoar will convert text on the fly into blocks suitable
for loading in ASCII mode.  Read-only.
@end multitable

To create a cassette image for writing (with the @command{CSAVE} or
@command{CSAVEM} BASIC commands, for example), use the @option{-tape-write
@var{filename}} option, or press @kbd{@key{CTRL}+W}.  If a file already exists,
new data will be appended to it.  Rewind the output take to overwrite it.  Note
a slight behaviour difference: CAS files can only be overwritten or appended
to, WAV files can overwrite existing data (leaving later data intact).

The currently open tape files used for reading and writing are distinct.

Some cassette tapes are distributed with only one of the stereo channels
containing data, and these sometimes cause loading issues.  How stereo audio
files are read can be adjusted with the @option{-tape-pan @var{value}} option,
where @var{value} is a number from 0.0 to 1.0.  0.0 will fully pan towards the
left channel, while 1.0 will fully pan to the right.  The default is 0.5 (equal
parts from both channels).

A certain amount of hysteresis is applied to the input when reading audio
files.  By default this is 1%, but this can be changed with the
@option{-tape-hysteresis @var{percent}} option.

Select the output frame rate when writing to audio files with
@option{-tape-ao-rate @var{hz}}.  The default is 9600Hz.

Some debugging actions can be triggered each time the cassette motor switches
off (e.g. when finished loading).  @xref{Debugging}.

The MC-10 has no tape motor control, so when you insert a cassette, the player
defaults to paused.  After typing @command{CLOAD} or @command{CLOADM}, you will
have to start the player by selecting @clicksequence{File @click{} Cassette
@click{} Play} (Windows, Mac OS X), or by clicking @key{Play} in the tape
control dialog (GTK+, @clicksequence{Tool @click{} Tape Control} or
@kbd{@key{CTRL}+T}).

The @option{-tape-fast} option accelerates tape loading by intercepting ROM
calls.  Disable with @option{-no-tape-fast}.  On by default.

When fast loading is enabled, the @option{-tape-pad-auto} option will, for
@file{.cas} files, ignore the motor delay when insufficient initial leader
bytes are detected.  This helps with old tape images that would not load on
real hardware if simply converted to an audio file.  On by default; switch off
with @option{-no-tape-pad-auto}.

The @option{-tape-rewrite} option enables rewriting of anything read from the
input tape to the output tape.  This is useful for creating ``well formed''
@file{.cas} files.  Use the @option{-tape-rewrite-gap-ms @var{ms}} option to
set the inter-block gap in milliseconds (default 500ms).  You can set the
leader length following gaps with the @option{-tape-rewrite-leader @var{bytes}}
option (default 256 bytes).

Where available, these options can be changed on the fly in the GUI.


@node Floppy Disks
@section Floppy Disks

If a disk interface cartridge is selected, XRoar supports virtual disks.  Three
virtual disk formats are supported:

@multitable @columnfractions .20 .75
@headitem Extension @tab Description
@item @file{.dmk}
@tab Disk image file in a format defined by David Keil.  These images store a lot of
information about the structure of a disk and support both single and double
density data.
@item @file{.jvc}, @file{.os9}, @file{.dsk}
@tab Disk image file in a basic sector-by-sector format with optional
header information.
@item @file{.vdk}
@tab Another disk image file format, used by PC-Dragon.
@end multitable

To insert a disk into a particular drive, press @kbd{@key{CTRL}+@var{[1-4]}}.

When you attach a disk, it is read into memory, and subsequent disk operations
are performed on this in-memory copy.  Write enable defaults to on (so write
operations on the copy will work), but write back defaults to off, so updates
will not be written to the disk image file.  To toggle write enable, press
@kbd{@key{CTRL}+@var{[5-8]}}, where the number to press is the drive number plus
4.  To toggle write back, press @kbd{@key{CTRL}+@key{SHIFT}+@var{[5-8]}}.  Even
with write back enabled, image files will not be updated until the disk in a
virtual drive is changed, or you quit the emulator.

Where available, these options can also be changed on the fly in the GUI.

Write back can be set to default to on with the @option{-disk-write-back}
command line option.

To flush any changes made to in-memory disk images to their backing file (but
only those with write back enabled), press @kbd{@key{CTRL}+@key{SHIFT}+D}.

The JVC format specifies that the disk images without headers are single-sided,
but some double-sided disk images have been made available without headers.
These cannot normally be distinguished from a single-sided disk that happens to
have twice the number of tracks.  If an OS-9 filesystem is present, the
identification sector is inspected to determine the correct disk structure.
This step will always be performed for headerless images with the @file{.os9}
filename extension, but may be disabled for the other valid JVC filename
extensions with @option{-no-disk-auto-os9}.

You can create a new blank disk in a virtual drive by pressing
@kbd{@key{CTRL}+@key{SHIFT}+@var{[1-4]}}.  You will be a prompted for a
filename, and the filename extension determines which type of file will be
written.

Note that RS-DOS for the Tandy Colour Computer numbers its drives from zero
instead of one, so when you perform operations on Drive 1, from the CoCo's
point of view, that will be Drive 0.


@node ROM cartridges
@section ROM cartridges

ROM cartridge images have a @file{.rom} or @file{.ccc} filename extension.
Because XRoar supports other types of cartridge, loading a ROM image actually
just creates a cartridge instance of type @samp{rom}.  @xref{Cartridges}.


@node Snapshots
@section Snapshots

XRoar can save out a snapshot of the emulated machine state and read the
snapshots back in later.  To save a snapshot, press @kbd{@key{CTRL}+S}.
When using @kbd{@key{CTRL}+L} to load a file, anything ending in @file{.sna}
will be recognised as a snapshot.

Most internal state should be dumped to the snapshot.  External data like ROM
images or disk image files will be referenced by name, so when you read the
snapshot back in, they need to exist in the same place they were before.

State that is explicitly @emph{not} included in snapshots includes ``Becker
port'' DriveWire connections and GDB listen parameters.  These will use your
local settings, which default to interacting with the local host only.

Note that the snapshot format has changed since version 0.37 to accomodate the
new CoCo 3 and MC-10 support, along with other complex device state.  The old
snapshot format is deprecated, but can still be read for now.


@node Binary files
@section Binary files

File types containing raw binary data to be loaded into RAM:

@multitable @columnfractions .15 .80
@headitem Extension @tab Description
@item .bin
@tab Binary file (DragonDOS or CoCo).  XRoar can load these directly into memory
and optionally autorun them.  Read-only
@item .hex
@tab Intel hex record.  An ASCII format that encodes binary data and
where in memory to load it.  Read-only
@end multitable


@iftex
@vskip 0pt plus 1filll
@end iftex

@node Firmware ROM images
@section Firmware ROM images

Firmware ROM image files are configured as part of a machine or a cartridge.
They have a filename extension of @file{.rom} or @file{.dgn}, and can be
specified as:

@itemize @bullet
@item Complete path to a file.
@item Base filename of an image, to be discovered within a search path.
@item Base filename of an image, omitting the extension.  XRoar will search as above, appending the known ROM filename extensions.
@item An @samp{@@} character followed by the name of a ROM list.
@end itemize

A ROM list is a comma-separated list of images, each following the rules above.
ROM lists may refer to other ROM lists.  Define a ROM list with
@option{-romlist @var{name}=@var{image}[,@var{image}]@dots{}}.  View the
defined ROM lists with @option{-romlist-print}.

To make life easier, the default image for each type of machine or cartridge
usually refers to a ROM list which contains all the corresponding filenames
seen ``in the wild'', the primary examples being:

@multitable {Tandy Super ECB (PAL CoCo 3)} {Xdragondos_compatxx} {dplus49b, sdose6, ddos10XXXXX}
@headitem Firmware ROM @tab ROM list @tab Canonical image names
@item Dragon 32 BASIC @tab @samp{@@dragon32} @tab @file{d32.rom}
@item Dragon 64 32K BASIC @tab @samp{@@dragon64} @tab @file{d64_1.rom}
@item Dragon 64 64K BASIC @tab @samp{@@dragon64_alt} @tab @file{d64_2.rom}
@item Dragon 200-E 32K BASIC @tab @samp{@@dragon200e} @tab @file{d200e_1.rom}
@item Dragon 200-E 64K BASIC @tab @samp{@@dragon200e_alt} @tab @file{d200e_2.rom}
@item Dragon 200-E Charset@tab @samp{@@dragon200e_charset} @tab @file{d200e_26.rom}
@item Tandy Colour BASIC @tab @samp{@@coco} @tab @file{bas13.rom}, @file{bas12.rom}, @file{bas11.rom}, @file{bas10.rom}
@item Tandy Extended BASIC @tab @samp{@@coco_ext} @tab @file{extbas11.rom}, @file{extbas10.rom}
@item Tandy Super ECB (CoCo 3) @tab @samp{@@coco3} @tab @file{coco3.rom}
@item Tandy Super ECB (PAL CoCo 3) @tab @samp{@@coco3p} @tab @file{coco3p.rom}
@item Tandy Microcolour BASIC @tab @samp{@@mc10} @tab @file{mc10.rom}
@item DragonDOS @tab @samp{@@dragondos_compat} @tab @file{dplus49b.rom}, @file{sdose6.rom}, @file{ddos10.rom}
@item Delta System @tab @samp{@@delta} @tab @file{delta.rom}
@item RS-DOS @tab @samp{@@rsdos} @tab @file{disk11.rom}, @file{disk10.rom}
@item RS-DOS with Becker port @tab @samp{@@rsdos_becker} @tab @file{hdbdw3bck.rom}
@item Orchestra 90-CC @tab @samp{orch90.rom} @tab
@end multitable

The default search path for images specified only as a base filename varies by
platform, and is detailed in @ref{Getting started}.  This path can can be
overridden with the option @option{-rompath=@var{path}}, where @var{path} is a
colon-separated list of directories to search.  The path is parsed in the same
manner as the configuration file search path (see @ref{Getting started}).

The @env{XROAR_ROM_PATH} environment variable can also be used to specify the
search path, but this behaviour is deprecated and may be removed in a future
version.

A CRC32 value is calculated and reported for each ROM image loaded.  XRoar
uses these CRCs to determine whether certain breakpoints can be used (e.g. for
fast tape loading).  The lists of CRCs matched can be defined in a similar way
to ROM lists using the @option{-crclist
@var{list}=@var{crc}[,@var{crc}]@dots{}} option.  Each @var{crc} is a 8-digit
hex number preceeded by @samp{0x}, or the name of a nested list preceeded by
@samp{@@}.  Use this if you have a modified version of a BASIC ROM that
maintains compatible entry points with an original.  View the current lists
with @option{-crclist-print}.

Sometimes it may be useful to force CRC matching so that breakpoints apply
(e.g. you are modifying a ROM image and don't wish to have to add its CRC to
the match list each time you modify it).  The @option{-force-crc-match} option
forces the CRCs to be as if an original ROM image were loaded.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node User interface
@chapter User interface

@menu
* User interface module::
* Video output::
* Audio output::
* Keyboard::
* Joysticks::
* Printing::
* Debugging::
@end menu

@node User interface module
@section User interface module

The user interface depends on supporting toolkit packages as described in
@ref{Building from source}.  Selection of user interface module may affect
which other types of module are available: in particular, video output is
strongly tied to the user interface.

@table @option
@item -ui @var{module}
Select user-interface module.  @option{-ui help} to list compiled-in modules.
@end table

@subsection GTK+ user interface

Select with @option{-ui gtk2}.

This is the most full-featured user interface.  It provides extensive dynamic
menus, and control dialogues for cassette and disk files.  This is the
preferred interface under Linux.

Only one video module is usable with this user interface: @samp{gtkgl}.

@subsection SDL user interface

Select with @option{-ui sdl}.

More limited than the GTK+ interface, providing keyboard shortcuts and, in
the Mac OS X and Windows variants, some basic menus.

Under Mac OS X, many operations are usable by pressing @kbd{Command}+@var{key}
as well as the usual shortcut of @kbd{@key{CTRL}+@var{key}}.


@node Video output
@section Video output

@table @option

@item -vo @var{module}

Video output module to use.  Available modules depend on the selected
user-interface module.  @option{-vo help} gives a complete list for each
possible user-interface.

@item -fs

Start full-screen.  Toggle full-screen with @kbd{@key{CTRL}+F} or @kbd{@key{F11}}.

@item -fskip @var{frames}

Specify frameskip.  Default is @samp{0}.  For slower machines.

@item -gl-filter @var{filter}

Filtering method to use when scaling the screen.  One of @samp{linear},
@samp{nearest} or @samp{auto} (the default).  OpenGL output modules only.

@item -invert-text

Start up with inverted text mode.

@item -ccr @var{renderer}

Composite video cross-colour renderer.  One of @samp{simple} (very fast),
@samp{5bit} (fast, more accurate) or @samp{simulated} (slow, very accurate).
Default is @samp{5bit}.

@end table

Real NTSC machines start in one of two cross-colour states at random.  Games
often prompt the user to ``Press Enter if the screen is red'', for example.
You can press @kbd{@key{CTRL}+A}, to cycle through three modes: Off,
Blue-red and Red-blue.

Inverted text mode may be toggled by pressing @kbd{@key{CTRL}+@key{SHIFT}+I}.


@node Audio output
@section Audio output

@table @option

@item -ao @var{module}

Select audio output module.  @option{-ao help} for a list.

@item -ao-device @var{device}

Module-specific device specifier.  e.g. @file{/dev/dsp} for OSS.

@item -ao-format @var{format}

Specify audio sample format.  @option{-ao-format help} for a list.

@item -ao-rate @var{hz}

Specify audio frame rate, where supported.  The default is taken from the
operating system if possible, otherwise it will usually be @samp{48000}.

@item -ao-channels @var{n}

Specify number of channels (1 or 2).  Default is usually 2.

@item -ao-fragments @var{n}

Specify number of audio fragments.

@item -ao-fragment-ms @var{ms}

Specify audio fragment size in milliseconds.

@item -ao-fragment-frames @var{frames}

Specify audio buffer size in frames.

@item -ao-buffer-ms @var{ms}

Specify total audio buffer size in milliseconds.

@item -ao-buffer-frames @var{frames}

Specify total audio buffer size in frames.

@item -ao-gain @var{db}

Specify audio gain in dB relative to 0 dBFS.  Only negative values really make
sense here.  The default is @samp{-3.0}.

@item -volume @var{volume}

Older way to specify volume.  Simple linear scaling, using values 0--100.

@end table

Audio latency is a concern for emulators, so XRoar allows the buffering
characteristics to be configured with the fragment and buffer options above.
Not all audio modules support all options, but setting the total audio buffer
size will usually have an effect.  Bear in mind that any figures reported by
XRoar reflect what it was able to request, and won't include any extra
buffering introduced by the underlying sound system.

When the Orchestra 90-CC cartridge is attached, its stereo output needs to be
mixed with the Dragon's normal audio.  To allow a small amount of headroom for
this, the default gain is set to @samp{-3.0} (dB relative to full scale), but
be aware that it would still be possible for this to clip depending on what's
happening on the internal sound bus.  A setting of @option{-ao-gain -9.0} would
give plenty of headroom (at the expense of a quieter overall sound).


@node Keyboard
@section Keyboard

The default mapping of host keys to emulated keys is based on the original
@emph{positions} of the keys, with certain exceptions: cursor keys are mapped
directly, @key{Escape} maps to the Dragon's @key{BREAK} key, and @key{Home}
maps to @key{CLEAR}.  Other keys may also be mapped to @key{CLEAR} if there is
a choice in your selected keymap that doesn't conflict with a regular character
in translated mode.

For position-based mapping, XRoar needs to be informed of the layout of the
host's keyboard.  If it is not the default (UK), use the @option{-keymap
@var{code}} option.

XRoar can also be put into ``translated'' keyboard mode, where characters typed
on a PC keyboard are translated into the equivalent keystrokes on the Dragon.
Use the @option{-kbd-translate} option to default to this mode.  Press
@kbd{@key{CTRL}+Z} at any time to toggle between the two modes.

In translated mode, @key{SHIFT}+@kbd{Return} is mapped to the Caps Lock
combination (@key{SHIFT}+@kbd{0} usually, @key{SHIFT}+@kbd{ENTER} on the Dragon
200-E).  Similarly, @key{SHIFT}+@kbd{Space} is mapped to the ``pause output''
combination (@key{SHIFT}+@kbd{@@} usually, @key{SHIFT}+@kbd{Space} on the
Dragon 200-E).

@table @option

@item -keymap @var{code}

Specify host keyboard layout.  @option{-keymap help} for a list.  Default is
@samp{uk}.  This option adapts a variety of known host keyboard layout such
that their untranslated keys are in roughly the same position as on a real
Dragon computer.  Basically equivalent to a pre-rolled list of
@option{-kbd-bind} options.

@item -kbd-bind @var{hkey}=[pre:]@var{dkey}

Bind host key @var{hkey} to emulated key @var{dkey}.  If prefixed with
"preempt:" or "pre:", this binding preempts translation (useful for modifier
keys).  Interpretation of @var{hkey} depends on which user-interface toolkit is
in use, and it might be useful to run with @option{-debug-ui 1} to see what the
toolkit calls your host keys.

Special values for @var{dkey} are: @samp{colon}, @samp{semicolon},
@samp{comma}, @samp{minus}, @samp{fullstop}, @samp{period}, @samp{dot},
@samp{slash}, @samp{at}, @samp{up}, @samp{down}, @samp{left}, @samp{right},
@samp{space}, @samp{enter}, @samp{clear}, @samp{break}, @samp{escape},
@samp{shift}, @samp{alt}, @samp{ctrl}, @samp{control}, @samp{f1}, @samp{f2}.

@item -kbd-translate

Start up in ``translated'' keyboard mode.

@item -type @var{string}

Intercept ROM calls to type @var{string} into BASIC on startup.

@end table

The keyboards of the Dragon, Dragon 200-E and Tandy machines operate in the
same way, but the matrix and/or key layouts differ.  When you select a machine
(see @ref{Machines}), the appropriate layout is selected for you, but you can
cycle between them by pressing @kbd{@key{CTRL}+K}.

XRoar will simulate the ``ghosting'' effects inherent in a simple matrix
design, but the accuracy of this simulation will depend very much on your host
keyboard, which vary greatly in the amount of simultaneous keypresses they
support (for more information, search for ``NKRO'').


@node Joysticks
@section Joysticks

XRoar supports attached joysticks, or can emulate them using the keyboard or
mouse (``virtual joysticks'').  There are a few built-in configurations, or new
ones can be defined.  Here are the built-ins:

@multitable {kjoy0xxx} {First two axes and first two buttons of second physical joystickxxx}
@headitem Name @tab Description
@item @samp{joy0} @tab First two axes and first two buttons of first physical joystick
@item @samp{joy1} @tab First two axes and first two buttons of second physical joystick
@item @samp{kjoy0} @tab Keyboard based virtual joystick using cursor keys and @key{Left Alt}.
@item @samp{mjoy0} @tab Mouse based virtual joystick mapped to screen position
@end multitable

By default, @samp{joy0} (the first physical joystick) is mapped to the Dragon's
right joystick port, and @samp{joy1} (the second physical joystick) to the left
port.  Map different named joysticks with @option{-joy-right @var{name}} and
@option{-joy-left @var{name}}.  Right and left joystick mapping can be easily
swapped by pressing @kbd{@key{CTRL}+@key{SHIFT}+J}.

A configured ``virtual joystick'' can be used by pressing
@kbd{@key{CTRL}+J}.  The first press substitutes it for the right joystick,
the second press with the left joystick and a third press disables it again.
The virtual joystick defaults to the keyboard-based @samp{kjoy0} described
above, but can be reconfigured with @option{-joy-virtual @var{name}}.

A joystick configuration can be created or configured by selecting it by name
with @option{-joy @var{name}}, and then configuring its axes with
@option{-joy-axis @var{index}=@var{spec}} and buttons with @option{-joy-button
@var{index}=@var{spec}}.  In each case, @var{spec} has the syntax
@var{module}:@var{args}, with @var{args} being a comma-separated list, the
format of which is specific to @var{module}:

@multitable {physicalxxx} {screen-offset0,screen-offset1xxx} {joystick-index,button-indexxxx}
@headitem Module @tab Axis args @tab Button args
@item @samp{physical} @tab @var{joystick-index},@var{[-]axis-index} @tab @var{joystick-index},@var{button-index}
@item @samp{keyboard} @tab @var{key-name0},@var{key-name1} @tab @var{key-name}
@item @samp{mouse} @tab @var{screen-offset0},@var{screen-offset1} @tab @var{button-number}
@end multitable

For physical joysticks a @samp{-} before the axis index inverts the axis.  Key
names for the keyboard module depend on the underlying toolkit.  The default
screen offsets for the mouse module are @samp{X=2,254} and @samp{Y=1.5,190.5}
which gives reasonable behaviour for some games and utilities.


@node Printing
@section Printing

XRoar supports redirecting the Dragon parallel printer output to a file or pipe
with the @option{-lp-file} or @option{-lp-pipe} option.  Printed data will be
sent to the appropriate stream.  Pressing @kbd{@key{CTRL}+@key{SHIFT}+P}
will flush the current stream by closing it (so if the stream is a pipe, the
filter will complete).  The stream will be re-opened when any new data is sent.

The pipe feature allows you to use useful print filters such as
@command{enscript}, e.g. @option{-lp-pipe "enscript -B -N r -d
@emph{printer-name}"}.  This will send a job to your printer, using carriage
returns as line feeds (the Dragon default), each time you press
@kbd{@key{CTRL}+@key{SHIFT}+P} (or exit the emulator).

@table @option

@item -lp-file @var{filename}
Append printer output to @var{filename}.

@item -lp-pipe @var{command}
Pipe printer output to @var{command}.

@end table

Note that the CoCo uses a serial printer port.  As full serial support is yet
to be added, a very limited form of print redirection is implemented for the
CoCo using a ROM BASIC intercept.  This is enough to support BASIC commands
like LLIST, but will not cope with programs implementing their own serial
routines.


@node Debugging
@section Debugging

XRoar can act as a remote target for GDB using a network socket.  When GDB
connects, emulation is stopped.  GDB can then inspect memory, instruct the
target to set breakpoints and watchpoints (read, write and access), single step
or continue execution.  A version of GDB patched to specifically support 6809
targets can also perform disassembly and inspect registers.  For more
information on how to use GDB, see the
@myuref{http://www.gnu.org/software/gdb/documentation/, GDB Documentation}.

Enable the GDB remote target with @option{-gdb}.  The default IP and port for
the target are @samp{127.0.0.1} and @samp{65520}.  These can be overridden with
the @option{-gdb-ip} and @option{-gdb-port} options.

XRoar also supports a simpler ``trace mode'', where it will dump a disassembly
of every instruction it executes to the console.  Toggle trace mode on or off
with @kbd{@key{CTRL}+V}.  Trace mode can be enabled from startup with the
@option{-trace} option.

Note that GDB support is not currently implemented for the 6803 used by the
MC-10, but trace mode is.

User-interface debugging flag can be enabled with @option{-debug-ui
@var{value}}, where only one value is currently supported:

@table @asis
@item 0x0001
Keyboard event debugging.
@end table

Hex & binary file debugging can be enabled with @option{-debug-file
@var{value}}, where the value is a bitwise ORing of the following:

@table @asis
@item 0x0001
Print summary information such as load or exec addresses.
@item 0x0002
Hex dump of all data read into memory.
@item 0x0004
Print filename block metadata when autorunning a tape.
@end table

Floppy controller debugging can be enabled with @option{-debug-fdc @var{value}},
where the value is a bitwise ORing of the following:

@table @asis
@item 0x0001
Show FDC commands.
@item 0x0002
Show all FDC states.
@item 0x0004
Hex dump of read/write sector data.
@item 0x0008
Hex dump of Becker port conversation data.
@item 0x0010
General FDC event debugging.
@end table

The GDB stub can also emit debug information about its own operation with
@option{-debug-gdb @var{value}}, where value is a bitwise ORing of:

@table @asis
@item 0x0001
Connection open and close.
@item 0x0002
Show packet data.
@item 0x0004
Checksum reporting.
@item 0x0008
Report on general queries.
@end table

The special value argument of -1 parses as ``all bits set'', and so enables all
corresponding debug options.

XRoar prints various other informational messages to standard output by
default, including when the state of certain toggles is modified.  Verbosity
can be changed with the @option{-verbose @var{level}} option.  @option{-quiet}
is equivalent to @option{-verbose 0}.  Levels are:

@table @asis
@item 0
Quiet.  Only warnings and errors printed.
@item 1
Print startup diagnostics and emulator state changes (default).
@item 2
Report some emulated machine state changes.
@item 3
Miscellaneous internal debugging.
@end table

XRoar can be told to exit after a number of (emulated) seconds with the
@option{-timeout @var{seconds}} option.

XRoar can quit a number of seconds after the cassette motor is switched off
with the @option{-timeout-motoroff @var{seconds}} option.  This is useful in
the case of automatic tape rewriting.  A value of 1 is usually sufficient to
account for the brief motor click that occurs after header blocks and during
gapped loading.

Similarly, a snapshot can be automatically written after loading with the
@option{-snap-motoroff @var{file}} option.   The file is overwritten each time
the motor transitions to off.  This can be used to help analyse the machine
state immediately after loading, before any autorun code has taken effect.

To see debug output from the pre-built Windows binary, run it with @option{-C}
as the first option to allocate a console.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Acknowledgements
@chapter Acknowledgements

I made reference to the MAME 6809 core for clues on how the overflow bit in the
condition code register was handled.

Darren Atkinson's @cite{Motorola 6809 and Hitachi 6309 Programmers Reference}
has been very useful for 6309 support and fleshing out some of the illegal
instructions on the 6809.

Alan Cox contributed the IDE code.

Tormod Voldon contributed support for his NX32 and MOOH devices (including
general SPI and SD image support).

Various people have provided feedback or test cases that have helped nail down
bugs; read the ChangeLog for details.

And thanks to all the people on the
@myuref{https://archive.worldofdragon.org/phpBB3/, Dragon Archive Forums},
CoCoTALK! Discord and IRC that have provided helpful feedback and insight.


@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Installation
@appendix Installation

@section Binary packages

Pre-built binary packages are available from the
@myuref{https://www.6809.org.uk/xroar/, XRoar home page}.  If one is not
available for your architecture, you will need to build from source.  XRoar
should build and run on any POSIX-like system for which SDL version 2 is
available.

You will also need BASIC ROM images---binary dumps of the firmware from an
original machine.  The originals were part-written by Microsoft, so they are
not distributed in the XRoar packages.


@subsection Mac OS X binary package

Download and unzip the appropriate @file{.zip} distribution for your system.
Drag the application icon to @file{/Applications/}.

For troubleshooting or testing options, it's often a good idea to run from the
command line, but application packages don't make that trivial.  A symbolic
link to somewhere in your @env{PATH} is all that's required.  e.g.:

@example
$ sudo ln -s /Applications/XRoar.app/Contents/MacOS/xroar \
        /usr/local/bin/xroar
@end example

After this, you can start the emulator by simply typing @command{xroar}
followed by any command line options.

ROM images should be placed in a directory you create under your @env{HOME}
named @file{~/Library/XRoar/roms/} (not the system directory,
@file{/Library/}).  Name any configuration file you create
@file{~/Library/XRoar/xroar.conf}.

The Mac OS X build provides a menu for access to certain features, and often
accepts the more familiar @kbd{@key{Command}+@var{key}} in place of the
@kbd{@key{CTRL}+@var{key}} shortcuts listed in this manual.


@subsection Windows binary package

Download and unzip the appropriate @file{.zip} distribution for your system.

The easiest way forward is to simply put ROM images into the directory created
when you unzip the distribution, and then run the @file{.exe} straight from
there.  You can also put any configuration file (@file{xroar.conf}) here.

However, if you want to avoid having to move files around each time you
upgrade, you can create @file{Documents/XRoar} to contain your configuration
file, and a subdirectory of that, @file{Documents/XRoar/roms} for ROM images.

Note when troubleshooting that the logging from the Windows binary is probably
only going to be visible if you run it with the @option{-C} option (must be the
first option) to allocate a console.

The Windows build provides menu-based access to certain features.


@node Building from source
@section Building from source

@menu
* Dependencies::
* Compilation::
@end menu

@node Dependencies
@subsection Dependencies

If there is no binary package for your system, you will have to build from
source.  XRoar can use various backend toolkits, and you will need to ensure
you have their development files installed.  If you're using Debian, this can
(at the time of writing) be achieved with the following simple command:

@example
$ sudo apt install build-essential libsndfile1-dev libgtk2.0-dev \
        libgtkglext1-dev libasound2-dev
@end example

Under Mac OS X, first be sure to install Apple's
@myuref{https://developer.apple.com/xcode/, Xcode} package.  The easiest way to
then ensure you have XRoar's dependencies available is to use a system like
@myuref{https://brew.sh/, Homebrew} or @myuref{http://www.macports.org/,
MacPorts}.  For Homebrew, the following command will install the required
dependencies:

@example
$ brew install libsndfile sdl2
@end example

Otherwise, you'll have to do a bit of platform-specific research to ensure you
have all the dependencies for a full build:

@myuref{http://www.gtk.org/, GTK+}, the GIMP toolkit, provides the most
full-featured user interface.  It is only usable as such if you also have
@myuref{http://projects.gnome.org/gtkglext/, GtkGlExt}, an OpenGL extension
used to provide video output.  Otherwise, it can provide a file requester for
use by other user interfaces.

@myuref{http://www.libsdl.org/, SDL}, Simple Directmedia Layer, provides a
slightly more basic user experience.  Menus are added using native code under
Mac OS X and Windows; any other target using SDL will support only keyboard
shortcuts.  Unless you are building for Linux, SDL is required to use
joysticks.  Version 2 required.

POSIX Regular Expressions are used in option parsing, so
@myuref{https://laurikari.net/tre/about/, TRE} is required on non-POSIX
platforms (e.g. Windows).

Other supported audio APIs: OSS, ALSA, PulseAudio, CoreAudio.  Some other
options are still in the code base, but have not been tested in a while.

@myuref{http://www.mega-nerd.com/libsndfile/, libsndfile} is recommended to
enable support for using audio files as cassette images.

@node Compilation
@subsection Compilation

Once you have the dependencies, building XRoar follows a familiar procedure:

@example
$ gzip -dc xroar-@value{VERSION}.tar.gz | tar xvf -
$ cd xroar-@value{VERSION}
$ ./configure
$ make
$ sudo make install
@end example

The @command{configure} script has a lot of options guiding what it tests for,
specifying cross-compilation, changing the install path, etc.  List them all
with the @option{--help} option.

By default, @command{configure} will set up an install @emph{prefix} of
@file{/usr/local}, but this can be changed by using the
@option{--prefix=@var{path}} option.

Once built, run @command{make install} as root (or use @command{sudo}, as in
the example above) to install the binary and info documentation on your system.
The executable is called @file{xroar}.  ROM images should be placed either in
your home directory as @file{~/.xroar/roms/}, or under the installation
@emph{prefix} as @file{@emph{prefix}/share/xroar/roms/}.  Any configuration
file should be created as @file{~/.xroar/xroar.conf}.

XRoar can be built on one platform to run on another.  The Windows binary
package is built like this.  To specify a cross-compile, use the
@option{--host=@var{host}} argument to @command{configure}.  For example, to
build for Windows, you might use @samp{./configure --host=i686-w64-mingw32}.
Getting everything ``just so'' for a cross-build can be a tricky procedure, and
the details are beyond the scope of this manual.

XRoar can be built to a WebAssembly target using
@myuref{https://emscripten.org/, Emscripten}.  With the SDK installed, run
@command{emconfigure ./configure --enable-wasm} to set up the build
environment.  Build with @command{emmake make}.  HTML/JavaScript and CSS
examples for interfacing to the output are included in the @file{wasm/}
subdirectory.

@c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

@node Keyboard shortcuts
@appendix Keyboard shortcuts

A summary of commonly available keyboard shortcuts.

@multitable {XXXXXXXXX} {XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX}
@item @kbd{@key{CTRL}+A} @tab Cycle through "TV inputs", including cross-colour modes.
@item @kbd{@key{CTRL}+D} @tab Open disk control dialogue (GTK+ only).
@item @kbd{@key{CTRL}+@key{SHIFT}+D} @tab Flush disk images.
@item @kbd{@key{CTRL}+E} @tab Toggle DOS emulation on/off - reset to take effect.
@item @kbd{@key{CTRL}+F}@*@ @ @ or @kbd{@key{F11}} @tab Toggle full screen mode.
@item @kbd{@key{CTRL}+@key{SHIFT}+H}@*@ @ @ or @kbd{@key{PAUSE}} @tab HALTs the CPU.  Seen on the Dynacom MX-1600.
@item @kbd{@key{CTRL}+@key{SHIFT}+I} @tab Toggle text mode inverse video.
@item @kbd{@key{CTRL}+J} @tab Cycle through joystick emulation modes (None, Right, Left).
@item @kbd{@key{CTRL}+@key{SHIFT}+J} @tab Swap left and right joysticks.
@item @kbd{@key{CTRL}+K} @tab Cycle through Dragon, Dragon 200-E and CoCo keyboard layouts.
@item @kbd{@key{CTRL}+L} @tab Load a file (see below).
@item @kbd{@key{CTRL}+@key{SHIFT}+L} @tab Load a file and attempt to autorun it where appropriate.
@item @kbd{@key{CTRL}+M} @tab Cycle through emulated machine types (resets machine).
@item @kbd{@key{CTRL}+@key{SHIFT}+P} @tab Flush printer output.
@item @kbd{@key{CTRL}+Q} @tab Quit emulator.
@item @kbd{@key{CTRL}+R} @tab Soft reset emulated machine.
@item @kbd{@key{CTRL}+@key{SHIFT}+R} @tab Hard reset emulated machine.
@item @kbd{@key{CTRL}+S} @tab Save a snapshot.
@item @kbd{@key{CTRL}+T} @tab Open the tape control dialogue (GTK+ only).
@item @kbd{@key{CTRL}+V} @tab Toggle trace mode.
@item @kbd{@key{CTRL}+W} @tab Attach a virtual cassette file for writing.
@item @kbd{@key{CTRL}+Z} @tab Enable keyboard translation mode.
@item @kbd{@key{F12}} @tab While held, the emulator will run at the maximum possible speed.
@item @kbd{@key{SHIFT}+@key{F12}} @tab Toggle rate limiting.  Emulator runs at maximum speed until pressed again.
@end multitable


@bye
