\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename xroar.info
@dircategory Emulators
@direntry
* XRoar: (xroar).               Dragon & Tandy CoCo emulator.
@end direntry

@settitle XRoar Dragon Emulator Manual
@c @setchapternewpage off
@ifclear VERSION
@set VERSION Unknown
@end ifclear
@c %**end of header

@macro myuref {link, text}
@uref{\link\, \text\}@c
@iftex
@footnote{\link\}@c
@end iftex
@end macro

@copying
This manual is for XRoar (version @value{VERSION}), a Dragon and
Tandy Colour Computer emulator.

Copyright @copyright{} 2013
Ciaran Anscomb.
@end copying

@titlepage
@title XRoar @value{VERSION}
@subtitle Dragon and Tandy Colour Computer emulator
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Introduction

XRoar is a Dragon emulator that runs on a wide variety of platforms.  Due to
hardware similarities, XRoar also emulates the Tandy Colour Computer (CoCo)
models 1 & 2.  Some features are:

@itemize @bullet
@item
Emulates Dragon 32, Dragon 64, Tano Dragon, Tandy CoCo 1 & 2.
@item
Emulates DragonDOS, Delta and RSDOS disk systems.
@item
Raw and translated keyboard modes.
@item
Reads and writes virtual cassettes (compact @file{.cas} files and audio files).
@item
Reads and writes VDK, JVC and DMK format virtual floppy diskettes.
@item
Save and load snapshots.
@end itemize

@ifnottex
@menu
* Getting started::
* Installation::
* Emulated hardware::
* User interface::
* Supported file types::
* ROM lists::
* Configuration file::
* Acknowledgements::
@end menu
@end ifnottex


@node Getting started, Installation, Top, Top
@chapter Getting started

To start, you will need to acquire (and maybe build) the software and install
it.  Pre-built binary packages are available from the
@myuref{http://www.6809.org.uk/dragon/xroar.shtml, XRoar home page}.  If one is
not available for your architecture, you will have to build from source.  XRoar
should build and run on any POSIX-like system for which
@myuref{http://www.libsdl.org/, SDL} is available.

You'll also need to get hold of ROM images for the machine you wish to emulate.
As Microsoft wrote the BASIC ROM, I don't feel comfortable offering them up
myself, but they may well be obtainable elsewhere on the Web.

For instructions on installing from source or binary package, and where to put
ROM images, see @ref{Installation}.

Once you've installed XRoar, run it and an emulator screen should appear.
Depending on which ROM images are found, XRoar will attempt to emulate a Dragon
64, a Dragon 32 and a CoCo, in that order.  If you just get a strange
checkerboard pattern of orange and inverse @samp{@@} signs, it probably failed
to find any ROM images - check that first.

@image{xroar-screens,,, Emulator with and without BASIC ROM, png}

From here you can attach tapes (@file{.cas} or @file{.wav} files) with
@kbd{Control+L}.  To load a program from tape, type @command{CLOADM} (machine
code) or @command{CLOAD} (BASIC).  If the program does not start automatically
when it has loaded (i.e., returns you to the ``OK'' prompt), you will have to
type @command{EXEC} (machine code) or @command{RUN} (BASIC) to start it.

XRoar will make use of attached joysticks, but can also emulate them with the
cursor keys and @kbd{Left Alt}.  Press @kbd{Control+J} to cycle through three
emulation modes: No joystick emulation (default), Left joystick, Right
joystick.


@node Installation
@chapter Installation

@menu
* Windows binary package::
* Mac OS X binary package::
* Building from source code::
* Cross-compilation of source code::
@end menu

@node Windows binary package
@section Windows binary package

First, unpack the downloaded ZIP file.  A subdirectory should be created
containing the main binary, supporting DLL files and documentation.

ROM images can be copied to this directory, or to a directory called
@file{@emph{USERPROFILE}/Application Data/XRoar/roms/}.  @emph{USERPROFILE} is
usually something like @file{C:/Documents and Settings/@emph{username}} or
@file{C:/Users/@emph{username}}.  ROM images in these locations with standard
filenames will be found automatically.  See @ref{ROM lists} for information on
filenames, and modifying the search lists.

XRoar can be started by running @file{xroar.exe} either from a file browser or
the command line.

@node Mac OS X binary package
@section Mac OS X binary package

Mount the downloaded disk image and drag the XRoar application icon into your
Applications directory.

ROM images can be copied either to @file{~/Library/XRoar/Roms/} or
@file{~/.xroar/roms/}.  ROM images in these locations with standard filenames
will be found automatically.  See @ref{ROM lists} for information on filenames,
and modifying the search lists.

XRoar can be started by double-clicking the application icon.

@node Building from source code
@section Building from source code

If there is no binary package for your system, you will have to build from
source.  Before doing so, you should ensure you have the dependencies required
to build:

@itemize @bullet
@item
@strong{GTK+}, the GIMP tookit, is used to provide (at least) a file requester
on Linux and Unix builds.  It is available from the
@myuref{http://www.gtk.org/, GTK+ home page}.
@item
@strong{GtkGLExt}, an OpenGL extension to GTK+.  This is optional, but if
present, a full GTK+ user interface can be presented.  Under Linux, this
obviates the need for SDL entirely.  It is available from the
@myuref{http://projects.gnome.org/gtkglext/, GTK+ OpenGL Extension project
page}.
@item
@strong{SDL}, Simple Directmedia Layer, is used for video and audio output on
most supported platforms.  It can be obtained from the
@myuref{http://www.libsdl.org/, SDL home page}.
@item
@strong{libsndfile} is optional but recommended.  It allows XRoar to use audio
files (such as WAVs) as a source for cassette input.  It is available on the
@myuref{http://www.mega-nerd.com/libsndfile/, libsndfile home page}.
@end itemize

If you use a modern Linux or Unix distribution, it's likely that most of these
packages will be installed by default, or easily available through its package
management system.

The actual build process should be fairly straightforward and follows the same
steps as many other software packages.  Unpack the source code, change into the
created source directory, run @command{configure} and then if everything looks
good, run @command{make}.  Example:

@example
$ gzip -dc xroar-@value{VERSION}.tar.gz | tar xvf -
$ cd xroar-@value{VERSION}
$ ./configure
$ make
@end example

@command{configure} will detect any optionally supported drivers like Sun
audio, OpenGL video, etc.

By default, @command{configure} will set up an install @emph{PREFIX} of
@file{/usr/local}, but this can be changed by using the @option{--prefix=PATH}
option.

Once built, run @command{make install} to install the binary and info
documentation on your system.  ROM images should be placed either in your home
directory under @file{.xroar/roms/}, or under the installation directory at
@file{@emph{PREFIX}/share/xroar/roms/}.

@node Cross-compilation of source code
@section Cross-compilation of source code

XRoar can be built on one platform to run on another.  The Windows binary
package is built like this.

To specify a cross-compile, use the @option{--host=HOST} argument to
@command{configure}.  For example, to build for Windows, you might use
@samp{./configure --host=i686-w64-mingw32}.  @command{configure} will detect
Windows headers and configure the build accordingly.


@node Emulated hardware
@chapter Emulated hardware

@menu
* Emulated machines::
* Video hardware::
* Audio hardware::
* Keyboard::
* Joysticks::
* Cassette images: Cassettes.
* Cartridges::
* Floppy disk images: Disks.
@end menu

@node Emulated machines
@section Emulated machines

XRoar has built-in definitions for the following machines, selectable with the
@option{-machine NAME} option:

@table @option
@item dragon32
Dragon 32 (PAL).
@item dragon64
Dragon 64 (PAL).
@item tano
Tano Dragon (NTSC).
@item coco
Tandy Colour Computer (PAL).
@item cocous
Tandy Color Computer (NTSC).
@end table

If no machine is specified on the command line (with @option{-machine NAME}),
XRoar will try and find a good default machine to emulate based on which ROM
images you have installed (see @ref{ROM lists}).  Alternatively, once started,
pressing @kbd{Control+M} cycles through all the supported machine types.

Additionally extra machines can be configured, or existing ones reconfigured,
with the following options:

@table @option
@item -machine NAME
Select existing or configure new machine (@option{-machine help} for list).
@item -machine-desc TEXT
Machine description (showed in @option{-machine help}).
@item -machine-arch ARCH
Machine architecture.  One of ``dragon64'', ``dragon32'' or ``coco''.
@item -machine-cpu CPU
Machine CPU.  Either ``6809'' or ``6309''.  Hitachi 6309 support has received
very little testing.
@item -bas FILENAME
Specify BASIC ROM to use (usually CoCo only).
@item -extbas FILENAME
Specify Extended BASIC ROM to use.
@item -altbas FILENAME
Specify alternate BASIC ROM (Dragon 64).
@item -nobas
Disable BASIC.
@item -noextbas
Disable Extended BASIC.
@item -noaltbas
Disable alternate BASIC (Dragon 64).
@item -tv-type TYPE
Set TV type (``pal'' or ``ntsc'').  @xref{Video hardware}.
@item -ram SIZE
Specify amount of RAM in kilobytes
@end table

Dragon machines all contain a complete version of Extended BASIC; CoCos are
able to run with a much reduced Color BASIC, with Extended BASIC being
optional.

Defining extra machines is most usefully done in the configuration file.
For example:

@example
machine pippin
machine-desc Dragon Pippin (prototype)
machine-arch dragon32
ram 16
@end example

This will define a machine named ``pippin'' that is basically a Dragon 32
with only 16K or RAM.

@node Video hardware
@section Video hardware

UK machines generate a 50Hz PAL display, whereas US machines output 60Hz NTSC.
XRoar will emulate the appropriate mode depending on the machine chosen (see
@ref{Emulated machines}), but you can force one or the other with the
@option{-pal} or @option{-ntsc} command line options.

Many programs employ a trick with cross-colour on NTSC televisions to generate
a colour display from an otherwise black & white video mode.  XRoar can
approximate the colours generated in these modes to varying levels of detail.
The default approach is to use a 5 bit lookup table, but a faster four colour
mode can be selected by running with @option{-ccr simple}.

NTSC machines start in one of two cross-colour states at random.  Games often
prompt the user to ``Press Enter if the screen is red'' (for example) to
identify which state the machine started in.  You can adjust which state it's
in by pressing @kbd{Control+A}, which cycles through three artifacted colour
modes: Off, Blue-red and Red-blue.

@node Audio hardware
@section Audio hardware

The Dragon can route analogue audio from three different sources: attached
cartridges, the cassette port and an internal 6-bit DAC.  Additionally, a PIA
line is connected to the audio output stage, so manipulating that gives a
single-bit sound source.  XRoar supports the DAC, single bit audio, and will
approximate cassette audio input.

Rarely, a game generates audio by toggling the analogue sound select source
rapidly.  XRoar will cope with this, but needs to work harder.  Disable support
for this with the @option{-fast-sound} command line option.

@node Keyboard
@section Keyboard

The layout of the Dragon's keyboard is a little different to that of modern
PCs, so XRoar tries to approximate the Dragon's layout on your PC keyboard as
closely as possible, so that game controls will remain in usable positions.
That said, they @emph{are} different, so some compromises need to be made:
@kbd{Escape} is mapped to the Dragon's @kbd{BREAK} key and @kbd{`} (grave /
back-tick) maps to the Dragon's @kbd{CLEAR} key.  There are no good nearby PC
keys that directly correspond to the Dragon's cursor keys, so the PC's cursors
are used for these.

If you don't use a UK keyboard, but want a close Dragon keyboard layout, you
can run with the @option{-keymap CODE} command-line option, where @option{CODE}
is a country code: ``uk'' (British), ``us'' (American), ``fr'' (French AZERTY),
``fr_CA'' (Canadian French QWERTY) or ``de'' (German QWERTZ).

XRoar can also be put into ``translated'' keyboard mode, where characters typed
on a PC keyboard are translated into the equivalent keystrokes on the Dragon.
Run with the @option{-kbd-translate} option to start with this enabled.  Press
@kbd{Control+Z} to toggle this mode.

The keyboards of the Dragon and Tandy CoCo are connected in the same way, but
the matrix is laid out slightly differently.  When you select a machine (see
@ref{Emulated machines}), the appropriate matrix layout is selected for you,
but you can toggle between the two layouts by pressing @kbd{Control+K}.

Additionally, most emulator functions are currently accessed through key
combinations.  See @ref{Keyboard commands} for a list.

@node Joysticks
@section Joysticks

XRoar supports attached joysticks, or can emulate them from the keyboard.

Joystick emulation starts off disabled, but you can cycle through three states
by pressing @kbd{Control+J}: Off, Left Joystick and Right Joystick.  When
emulating a joystick, the cursor keys control the axes and @kbd{Left Alt} maps
to the fire button.

By default, the first real joystick found is mapped to the Dragon's left
joystick port, and the second real joystick to the right port.  Left and right
joystick mapping can be easily swapped by pressing @kbd{Control+Shift+J}.

More fine-grained mappings can be specified with the @option{-joy-left} and
@option{-joy-right} command line options.  The argument to these command
consists of three pairs of numbers in the format
@option{JOYSTICK-NUMBER,INDEX}.  The pairs map the X axis, Y axis and fire
button respectively, and the joystick number is optional if previously
specified.  For example, @option{-joy-left 0,1:0:0} maps axes 1 and 0 on
joystick 0 to the X and Y axis on the left emulated joystick respectively.
Button 2 of joystick 0 is mapped to the left fire button.

Previous versions defaulted to a mapping suitable for using a PS2 adaptor.  To
get this old behaviour, use the command line options @option{-joy-left 0,3:2:0
-joy-right 0,0:1:1}.

@node Cassettes
@section Cassette images

XRoar supports three types of cassette image: @file{.cas} files, audio files
such as @file{.wav} and ASCII text files containing BASIC programs (@file{.bas}
or @file{.asc}).  @file{.cas} files contain a binary representation of what
would be loaded from tape, audio files are a recording of the tape itself, and
ASCII files contain plain text that is automatically wrapped up as an ASCII
BASIC file for loading.

To attach a cassette image for reading, use the @option{-load} or @option{-run}
command line options, or press @kbd{Control+L} and select it from the file
requester (hold @kbd{Shift} as well to attempt to autorun).

To create a cassette image for writing (with the @command{CSAVE} or
@command{CSAVEM} BASIC commands, for example), use the @option{-tape-write}
command line option, or press @kbd{Control+W} and enter a filename.
Created files will be truncated to zero length, so be careful not to overwrite
any existing files with this command.

The currently open tape files used for reading and writing are distinct.

Four command line options affect how tapes are read:

The @option{-tape-fast} option accelerates tape loading by intercepting ROM
calls.  Disable with @option{-no-tape-fast}.  On by default.

The @option{-tape-pad} option tries to make loading more reliable by
intercepting ROM calls and inserting extra leader bytes where appropriate.
Disable with @option{-no-tape-pad}.

The @option{-tape-pad-auto} option will, for @file{.cas} files, automatically
switch on leader padding when insufficient initial leader bytes are found.
Disable with @option{-no-tape-pad-auto}.  On by default.

The @option{-tape-rewrite} option enables rewriting of anything read from the
input tape to the output tape.  This is useful for creating ``well formed''
cassette images.

Where available, these options can be changed on the fly in the GUI.
@xref{Tape control}.

@node Cartridges
@section Cartridges

XRoar has built-in definitions for three cartridges, selectable with the
@option{-cart NAME} option:

@table @option
@item dragondos
DragonDOS, official disk controller cartridge from Dragon Data Ltd.
@item delta
Delta System, Premier Microsystems' disk controller cartridge for the Dragon.
@item rsdos
RSDOS, Tandy's disk controller cartridge for use with the CoCo.
@end table

Additionally extra cartridges can be configured, or existing ones reconfigured,
with the following options:

@table @option
@item -cart NAME
Select existing or configure new cartridge (@option{-cart help} for list).  If
NAME is not an existing cartridge and looks like a loadable ROM image filename
(@file{.rom} or @file{.dgn} filename extension), a ROM cart is defined for that
filename.
@item -cart-desc TEXT
Cartridge description (showed in @option{-cart help}).
@item -cart-type TYPE
Cartridge type.  A type of ``rom'' will define a ROM cartridge (e.g., for a
game).  The type can also be one of ``dragondos'', ``delta'' or ``rsdos'',
which will define a cartridge with a base type according to the list above.
@item -cart-rom FILENAME
ROM image to load ($C000-).
@item -cart-rom2 FILENAME
Second ROM image to load ($E000-).
@item -cart-becker
Enable becker port where supported.
@item -cart-autorun
Auto-start cartridge using FIRQ.
@end table

If no ROM is configured for a cartridge, there is a built-in list to search for
each of the disk controller types.  A ROM image will be required if you want to
use virtual disks.

Defining extra cartridges is most usefully done in the configuration file,
for example:

@example
cart sdose6
cart-desc SuperDOS E6
cart-type dragondos
cart-rom sdose6
cart-rom2 dosdream
@end example

This will define a cartridge called ``sdose6'' as a DragonDOS cartridge with
its ROM replaced with @file{sdose6}, and an additional ROM called
@file{dosdream}.

XRoar will automatically attempt to find a disk controller cartridge relevant
to the current machine unless the @option{-nodos} option is specified.

Selecting a ROM image file with the @option{-load} or @option{-run} command
line options, or with @kbd{Control+L} or @kbd{Control+Shift+L}, will attach a
ROM cartridge.

Within the emulator, cartridges can be enabled or disabled by pressing
@kbd{Control+E}.  You will almost certainly want to follow this with a hard
reset (@kbd{Control+Shift+R}).

@subsection DriveWire

XRoar is able to connect to a DriveWire server using a TCP connection,
simulating the "becker port", a memory-mapped address that provides a simple
command protocol for accessing devices.  Running with the @option{-becker}
option will enable this port when automatically selecting a DOS cartridge, or
it can be enabled when defining a cartridge with @option{-cart-becker}.

The IP and port to connect to can be specified with the @option{-becker-ip} and
@option{-becker-port} options respectively.  These default to ``localhost'' and
``65504'' respectively, which corresponds to the DriveWire 4 defaults.

@node Disks
@section Floppy disk images

If a disk controller cartridge is selected, XRoar supports virtual disks.

Three virtual disk formats are supported (see @ref{Supported file types}).  Of
these, DMK retains the most information about the actual layout of the floppy
disk, and is the only one that XRoar will recognise as containing
single-density data (as used by the Delta system).

When you attach a disk, it is read into memory, and subsequent disk operations
are performed on this in-memory copy.  Write enable defaults to on (so write
operations on the copy will work), but write back defaults to off, so updates
will not be written to the disk image file.  To toggle write enable, press
@kbd{Control+[5-8]}, where the number to press is the drive number plus 4.  To
toggle write back, press @kbd{Control+Shift+[5-8]}.  Even with write back
enabled, image files will not be updated until the disk in a virtual drive is
changed, or you quit the emulator.

Where available, these options can also be changed on the fly in the GUI.
@xref{Drive control}.

Write back can be set to default to on with the @option{-disk-write-back}
command line option.

You can create a new blank disk in a virtual drive by pressing
@kbd{Control+Shift+[1-4]}.  You will be a prompted for a filename, and the
extension determines which type of file will be written.


@node User interface
@chapter User interface

@menu
* Video output::
* Audio output::
* Printing::
* Drive control::
* Tape control::
* Keyboard commands::
* Snapshots::
* Trace mode::
* Command line options::
@end menu

@node Video output
@section Video output

Under the SDL user interface, three video output modules are available,
selectable with the @option{-vo MODULE} command line option:

@table @option
@item sdlgl
OpenGL accelerated video output.
@item sdlyuv
YUV overlay accelerated video output.
@item sdl
Basic unaccelerated unscalable video output.
@end table

When using OpenGL output, the @option{-gl-filter} option selects a filtering
method when scaling the image.  @option{-gl-filter linear} averages nearby
pixels (blur), @option{-gl-filter nearest} selects nearest neighbour pixels
(hard edges) and @option{-gl-filter auto} (the default) selects nearest when
the image size is an exact integer multiple of the base size, otherise selects
linear.

OpenGL output might not be available if you built from source without the
appropriate support.  Use @option{-vo help} for a list of available modules.

On slower machines, you can specify a value for frameskip with @option{-fskip
FRAMES}.  For every frame drawn to screen this amount of frames are then
skipped before the next one is drawn, reducing the amount of work needed.  The
default is @option{-fskip 0}, meaning no frames are skipped.

XRoar can be started full-screen by specifying @option{-fs}.

@node Audio output
@section Audio output

Specific audio modules exist for OSS, ALSA, Sun audio, Mac OS X coreaudio and
PulseAudio.  If none of these are available, generic SDL audio will be used.

Use of a specific module can be forced using @option{-ao MODULE}.  Use
@option{-ao null} to disable audio, or @option{-ao help} for a list of
available modules.

For most audio modules, the @option{-ao-rate HZ} option can be used to specify
a sample rate in Hz.  The default will usually be 44100.  The
@option{-ao-buffer-ms MS} or @option{-ao-buffer-samples N} options may be used
(where supported) to set an audio buffer size, either in milliseconds or number
of samples.

@node Drive control
@section Drive control

Currently only available in the GTK+ interface.  Pressing @kbd{Control+D}, or
selecting ``Drive Control'' from the ``Tool'' menu will open the drive control
window.

This window allows you to insert and eject disk images, and toggle their
write-enable and write-back states.  @xref{Disks}.

@node Tape control
@section Tape control

Currently only available in the GTK+ interface.  Pressing @kbd{Control+T}, or
selecting ``Tape Control'' from the ``Tool'' menu will open the tape control
window.

This window shows the current tape image filename and position.  The input tape
image is scanned, and any recognised file header blocks listed, along with
their position within the image.  Double clicking a filename will seek to that
point in the tape image.

Certain tape options can be configured here.  @xref{Cassettes}.

@node Printing
@section Printing

XRoar supports redirecting Dragon printer output to a file or pipe with the
@option{-lp-file} or @option{-lp-pipe} option.  Printed data will be sent to
the appropriate stream.  Pressing @kbd{Control+Shift+P} will flush the current
stream by closing it (so if the stream is a pipe, the filter will complete).
The stream will be re-opened when any new data is sent.

The pipe feature allows you to use useful print filters such as
@command{enscript}, e.g., @option{-lp-pipe ``enscript -B -N r -d
@emph{printer-name}''}.  This will send a job to your printer, using carriage
returns as line feeds (the Dragon default), each time you press
@kbd{Control+Shift+P} (or exit the emulator).

@node Keyboard commands
@section Keyboard commands

XRoar's user interface is currently based around either
@myuref{http://www.gtk.org/, GTK+} or @myuref{http://www.libsdl.org/, SDL}.
The emulator video output window is shown, and all operations are
performed with keyboard combinations, usually accessed as @kbd{Control+KEY}.
Under Mac OS X, most functions will be accessible as @kbd{Command+KEY}.

@table @kbd
@item Control+[1-4]
Insert a virtual disk into drive 1-4.  @xref{Disks}.
@item Control+Shift+[1-4]
Insert a blank virtual disk (40TSS) into drive 1-4.  @xref{Disks}.
@item Control+[5-8]
Toggle write enable on disk in drive 1-4.  @xref{Disks}.
@item Control+Shift+[5-8]
Toggle write back on disk in drive 1-4.  @xref{Disks}.
@item Control+A
Cycle through cross-colour video modes (hi-res only).  @xref{Video hardware}.
@item Control+C
Quit emulator.
@item Control+E
Toggle DOS emulation on/off - reset to take effect.  @xref{Disks}.
@item Control+F
Toggle full screen mode.
@item Control+J
Cycle through joystick emulation modes (None, Left, Right).  @xref{Joysticks}.
@item Control+Shift+J
Swap joystick mapping (left/right).  @xref{Joysticks}.
@item Control+K
Toggle between Dragon and CoCo keyboard layout.  @xref{Keyboard}.
@item Control+L
Load a file (see below).
@item Control+Shift+L
Load a file and attempt to autorun it where appropriate.
@item Control+M
Cycle through emulated machine types (resets machine).  @xref{Emulated machines}.
@item Control+Shift+P
Flush printer output.  @xref{Printing}.
@item Control+R
Soft reset emulated machine.
@item Control+Shift+R
Hard reset emulated machine.
@item Control+S
Save a snapshot.  @xref{Snapshots}.
@item Control+T
Open the tape control window (certain user interfaces only).  @xref{Tape control}.
@item Control+W
Attach a virtual cassette file for writing.  @xref{Cassettes}.
@item Control+Z
Enable keyboard translation mode.  @xref{Keyboard}.
@item F12
While held, the emulator will run at the maximum possible speed.
@end table

When using @kbd{Control+L} or @kbd{Control+Shift+L} to load a file, the action
to be taken is determined by its extension.  See @ref{Supported file types} for
details.

XRoar still supports the use of some old keyboard commands that were used to
attach specific types of file.  @kbd{Control+B} and @kbd{Control+H} are
synonymous with @kbd{Control+L}.

@node Snapshots
@section Machine snapshots

XRoar can save out a snapshot of the emulated machine state and read such
snapshots back in later.  To save a snapshot, press @kbd{Control+S}.  When
using @kbd{Control+L} to load a file, anything ending in @file{.sna} will be
recognised as a snapshot.

What is included in snapshots: Selected machine architecture, complete hardware
state, current keyboard map, filenames of attached disk image files.

What is @emph{not} (yet) included: Actual disk image data (only where to find
it), attached cassettes or cartridges.

@node Trace mode
@section Trace mode

XRoar contains a ``trace mode'', where it will dump a disassembly of every
instruction it executes to the console.  Trace mode defaults to off unless you
run with @option{-trace}.  Toggle trace mode on or off with @kbd{Control+V}.

@node Command line options
@section Command line options

Many emulator functions can be changed using keyboard shortcuts (see
@ref{Keyboard commands}), but some behaviour can also be changed from the
command line.

If you run the Windows pre-built binary, you might find that emulator output
gets written to a file called @file{stderr.txt} instead of to the console.

@subsection Emulated machine options

See @ref{Emulated machines} for more information.

@table @option
@item -machine NAME
Select/configure machine (@option{-machine help} for a list).
@item -bas FILENAME
Specify BASIC ROM to use (CoCo only)
@item -extbas FILENAME
Specify Extended BASIC ROM to use
@item -altbas FILENAME
Specify alternate BASIC ROM (Dragon 64)
@item -noextbas
Disable Extended BASIC
@item -nodos
Disable DOS (ROM and hardware emulation)
@item -tv-type TYPE
Set TV type (``pal'' or ``ntsc'').  @xref{Video hardware}.
@item -ram SIZE
Specify amount of RAM in kilobytes
@end table

@subsection Emulated cartridge options

See @ref{Cartridges} for more information.

@table @option
@item -cart NAME
Select/configure cartridge (-cart help for list).  @xref{Cartridges}.
@item -cart-desc TEXT
Set cartridge description.
@item -cart-type TYPE
Set cartridge type (-cart-type help for list).
Cartridge type.  A type of ``rom'' will define a ROM cartridge (e.g., for a
game).  The type can also be one of ``dragondos'', ``delta'' or ``rsdos'',
which will define a cartridge with a base type according to the list above.
@item -cart-rom FILENAME
The ROM image specified will be mapped to $C000-.
@item -cart-rom2 FILENAME
The ROM image specified will be mapped to $E000-.
@end table

@subsection Options to attach files

@table @option
@item -romlist NAME=LIST
Define a ROM list.  @xref{ROM lists}.
@item -romlist-print
Print defined ROM lists.
@item -crclist NAME=LIST
Define a ROM CRC list.  @xref{ROM lists}.
@item -crclist-print
Print defined ROM CRC lists.
@item -force-crc-match
Force per-architecture CRC matches.
@item -load FILENAME
Load or attach @file{FILENAME}.  @xref{Supported file types}.
@item -run FILENAME
Load or attach @file{FILENAME} and attempt autorun.
@item -tape-write FILENAME
Open @file{FILENAME} for tape writing.
@item -lp-file FILENAME
Append Dragon printer output to FILENAME.
@item -lp-pipe COMMAND
Pipe Dragon printer output to COMMAND.
@end table

@subsection Automatic actions

@table @option
@item -type STRING
Intercept ROM calls to type STRING into BASIC.
@end table

@subsection Emulator interface options

@table @option
@item -ui MODULE
Specify user interface module (@option{-ui help} for a list)
@item -vo MODULE
Specify video module (@option{-vo help} for a list)
@item -gl-filter FILTER
Select OpenGL texture filter (auto, linear, nearest)
@item -ao MODULE
Specify audio module (@option{-ao help} for a list)
@item -ao-rate HZ
Set audio sample rate (if supported by module)
@item -ao-buffer-ms MS
Set audio buffer size in ms (if supported)
@item -ao-buffer-samples N
Set audio buffer size in samples (if supported)
@item -volume VOLUME
Specify audio volume (0 - 100)
@item -fast-sound
Faster but less accurate sound.  @xref{Audio hardware}.
@item -fs
Start emulator full-screen if possible.
@item -ccr RENDERER
Specify cross-colour renderer (@option{-ccr help} for list).
@xref{Video hardware}.
@item -fskip FRAMES
Specify frameskip (default: 0).  @xref{Video output}.
@item -keymap CODE
Select host keyboard type by country code (uk, us, fr, de).  @xref{Keyboard}.
@item -kbd-translate
Enable keyboard translation mode.  @xref{Keyboard}.
@item -joy-left [XJ,][-]XA:[YJ,][-]YA:[FJ,]FB
@itemx -joy-right [XJ,][-]XA:[YJ,][-]YA:[FJ,]FB
Map a joystick.  @emph{J} = joystick number, @emph{A} = axis number,
@emph{B} = button number a @emph{-} before axis signifies inverted axis.
@xref{Joysticks}.
@item -tape-fast
Enable fast tape loading.  @xref{Cassettes}.
@item -tape-pad
Enable tape leader padding.  @xref{Cassettes}.
@item -tape-pad-auto
Detect need for leader padding automatically.  @xref{Cassettes}.
@item -tape-rewrite
Enable tape rewriting.  @xref{Cassettes}.
@item -disk-write-back
Default to enabling write-back for disk images.  @xref{Disks}.
@item -trace
Start with trace mode on.  @xref{Trace mode}.
@end table

@subsection Other options

@table @option
@item -h, --help
Display help text and exit
@item --version
Output version information and exit
@end table


@node Supported file types
@chapter Supported file types

XRoar can do useful things with a variety of file types.  The type of a file is
determined by its extension.  Supported file extensions are:

@multitable {Extension} {12345678901234567890123456789012345678901234567890} {Read & write}
@headitem Extension @tab Description @tab Read/write?
@item .dmk
@tab Disk image file in a format defined by David Keil. They store a lot of
information about the structure of a disk and support both single and double
density data. All disk images are manipulated internally in (near enough) this
format.  @xref{Disks}.
@tab Read & write
@item .jvc@*.dsk
@tab Disk image file in a basic sector-by-sector format with optional
header information.  @xref{Disks}.
@tab Read-only
@item .vdk
@tab Another disk image file format.  @xref{Disks}.
@tab Read-only
@item .bin
@tab Binary file (DragonDOS or CoCo). XRoar can load these directly into memory and optionally autorun them.
@tab Read-only
@item .sna
@tab XRoar snapshot. Contains a complete dump of RAM from a running
emulator session along with information like which machine was being
emulated, what DOS was attached, etc.  @xref{Snapshots}.
@tab Read & write
@item .hex
@tab Intel hex record. An ASCII format that encodes binary data and
where in memory to load it.
@tab Read-only
@item .cas
@tab Cassette file. Simple binary representation of data contained on a
tape. Cannot represent silence, or some custom encodings.  @xref{Cassettes}.
@tab Read & write
@item .wav
@tab Cassette audio file. XRoar can read sampled audio from original
cassettes. Actually, as audio input uses libsndfile, any file with an
unknown extension is passed to libsndfile to see if it recognises it as
an audio file.  @xref{Cassettes}.
@tab Read-only
@item .rom
@tab This represents two things: when starting, XRoar looks for ROM images with
this extension.  When subsequently told to load one, however, they are assumed
to be dumps of cartridge ROMs.
@xref{Cartridges}.
@tab Read-only
@end multitable

In general, to load or attach a file, press @kbd{Control+L} and choose a file
from the requester that appears.  What XRoar does with it will depend on its
file extension.  You can also automatically attach (and optionally start) files
from the command line by using the @option{-load FILE} or @option{-run FILE}
options.  If you @option{-load} or @option{-run} a cassette image, XRoar will
automatically disable any DOS cartridge emulation for you, as this can
interfere with some cassette-based games.  In addition, the first non-option
argument to XRoar is taken as a filename and treated as though it were the
argument to the @option{-run} option.


@node ROM lists
@chapter ROM lists

XRoar searches for ROM images in a variety of locations.  See
@ref{Installation} for where your particular platform will search.  The search
path can be overridden by including a colon-separated list of paths in the
@env{XROAR_ROM_PATH} environment variable.

Images are expected to have certain names.  There are a set of built-in lists
which can be modified using the @option{-romlist} option.  List elements are
comma-separated, and an element prefixed with an @samp{@@} character indicates
a nested list.  As an example, to append the ROM image ``d64extended'' to the
``d64_1'' list, use @option{-romlist d64_1=@@d64_1,d64extended}.

ROM images are searched for with either a @file{.rom} or a @file{.dgn}
extension.  @file{.dgn} files contain a 16 byte header, which is ignored.

View the currently defined ROM lists with the @option{-romlist-print} option,
but here are the canonical names for BASIC ROM images:

@multitable {Controller type} {ROM image name} {Disk Extended Color BASIC 1.1 or 1.0.}
@headitem Machine @tab ROM image name @tab Description
@item dragon32
@tab d32
@tab Dragon 32 BASIC.
@item dragon64@*
tano
@tab d64_1@*
d64_2
@tab 32K-mode Dragon 64 BASIC.@*
64K-mode Dragon 64 BASIC.
@item coco@*
cocous
@tab bas13@*
bas12@*
bas11@*
bas10
@tab Color BASIC 1.3, 1.2, 1.1 or 1.0.
@item
@tab extbas11@*
extbas10
@tab Extended Color BASIC 1.1 or 1.0.
@end multitable

Emulating a floppy drive controller cartridge requires that you have an image
of the DOS ROM that would have been part of it.  The same ROM lists are
consulted, but here are the canonical names for DOS ROM images:

@multitable {Controller type} {ROM image name} {Disk Extended Color BASIC 1.1 or 1.0.}
@headitem Controller type @tab ROM image name @tab Description
@item dragondos
@tab dplus49b@*
dplus48@*
sdose6@*
sdose5@*
sdose4@*
ddos40@*
ddos15@*
ddos10
@tab DragonDOS (using DOSplus, SuperDOS or original DragonDOS ROM).
@item delta
@tab delta
@tab Delta System.
@item rsdos
@tab disk11@*
disk10
@tab Disk Extended Color BASIC 1.1 or 1.0.
@item
@tab hdbdw3bck
@tab HDB-DOS 1.4 with DriveWire support
@end multitable

A CRC32 value is calculated (and reported) for BASIC ROMs loaded - this is used
to determine whether certain breakpoints can be used (e.g., for fast tape
loading).  The lists of CRCs matched can be defined in a similar way to ROM
lists using the @option{-crclist} option - you might do this if you have a
modified version of a BASIC ROM that maintains compatible entry points with an
original.  View the current list with @option{-crclist-print}.

Sometimes it may be useful to force CRC matching so that breakpoints apply
(e.g., you are modifying a ROM image and don't wish to have to add its CRC to
the match list each time you modify it).  The @option{-force-crc-match} option
forces the CRCs to be as if an original ROM image were loaded.


@node Configuration file
@chapter Configuration file

All command-line options can also be used as directives in a configuration file
called @file{xroar.conf}.  This file is searched for in a variety of locations:

@multitable {Mac OS X.} {~/Local Settings/Application Data/XRoar/zzzzzzzzzz}
@headitem System @tab Search order
@item Unix@*
Mac OS X
@tab Current working directory@*
@file{~/.xroar/}@*
@file{~/Library/XRoar/}@*
@file{@emph{PREFIX}/share/xroar/}
@item Windows
@tab Current working directory@*
@file{~/Local Settings/Application Data/XRoar/}@*
@file{~/Application Data/XRoar/}
@end multitable

@samp{~} indicates the user's home directory.  On Unix systems this is held in
the @env{HOME} environment variable (often @file{/home/@emph{username}}), on
Windows systems it is in the @env{USERPROFILE} environment variable (often
@file{c:/Documents and Settings/@emph{username}} or
@file{c:/Users/@emph{username}}).  @emph{PREFIX} is the installation prefix,
usually @file{/usr/local}.

The search path can be overridden, and an explicit file specified, by passing
@option{-c @var{filename}} as the very first option to XRoar.

Directives are listed one per line without the leading dashes of the command
line option.


@node Acknowledgements
@chapter Acknowledgements

I made reference to the MAME 6809 core for clues on how the overflow bit in the
condition code register was handled.

Thanks to all the people on the
@myuref{http://archive.worldofdragon.org/phpBB3/, Dragon Archive Forums} for
helpful feedback and insight.

Darren Atkinson's ``Motorola 6809 and Hitachi 6309 Programmers Reference'' has
been very useful for 6309 support and fleshing out the illegal instructions on
the 6809.

@bye
